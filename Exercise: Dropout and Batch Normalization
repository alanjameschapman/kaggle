{"metadata":{"jupytext":{"cell_metadata_filter":"-all","formats":"ipynb"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":1480608,"sourceType":"datasetVersion","datasetId":829369}],"dockerImageVersionId":30648,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"**This notebook is an exercise in the [Intro to Deep Learning](https://www.kaggle.com/learn/intro-to-deep-learning) course.  You can reference the tutorial at [this link](https://www.kaggle.com/ryanholbrook/dropout-and-batch-normalization).**\n\n---\n","metadata":{}},{"cell_type":"markdown","source":"# Introduction #\n\nIn this exercise, you'll add dropout to the *Spotify* model from Exercise 4 and see how batch normalization can let you successfully train models on difficult datasets.\n\nRun the next cell to get started!","metadata":{}},{"cell_type":"code","source":"# Setup plotting\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')\n# Set Matplotlib defaults\nplt.rc('figure', autolayout=True)\nplt.rc('axes', labelweight='bold', labelsize='large',\n       titleweight='bold', titlesize=18, titlepad=10)\nplt.rc('animation', html='html5')\n\n# Setup feedback system\nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.deep_learning_intro.ex5 import *","metadata":{"execution":{"iopub.status.busy":"2024-05-20T20:37:45.287575Z","iopub.execute_input":"2024-05-20T20:37:45.288246Z","iopub.status.idle":"2024-05-20T20:37:46.439156Z","shell.execute_reply.started":"2024-05-20T20:37:45.288216Z","shell.execute_reply":"2024-05-20T20:37:46.438360Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_33/195640296.py:3: MatplotlibDeprecationWarning: The seaborn styles shipped by Matplotlib are deprecated since 3.6, as they no longer correspond to the styles shipped by seaborn. However, they will remain available as 'seaborn-v0_8-<style>'. Alternatively, directly use the seaborn API instead.\n  plt.style.use('seaborn-whitegrid')\n","output_type":"stream"}]},{"cell_type":"markdown","source":"First load the *Spotify* dataset.","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.compose import make_column_transformer\nfrom sklearn.model_selection import GroupShuffleSplit\n\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import callbacks\n\nspotify = pd.read_csv('../input/dl-course-data/spotify.csv')\n\nX = spotify.copy().dropna()\ny = X.pop('track_popularity')\nartists = X['track_artist']\n\nfeatures_num = ['danceability', 'energy', 'key', 'loudness', 'mode',\n                'speechiness', 'acousticness', 'instrumentalness',\n                'liveness', 'valence', 'tempo', 'duration_ms']\nfeatures_cat = ['playlist_genre']\n\npreprocessor = make_column_transformer(\n    (StandardScaler(), features_num),\n    (OneHotEncoder(), features_cat),\n)\n\ndef group_split(X, y, group, train_size=0.75):\n    splitter = GroupShuffleSplit(train_size=train_size)\n    train, test = next(splitter.split(X, y, groups=group))\n    return (X.iloc[train], X.iloc[test], y.iloc[train], y.iloc[test])\n\nX_train, X_valid, y_train, y_valid = group_split(X, y, artists)\n\nX_train = preprocessor.fit_transform(X_train)\nX_valid = preprocessor.transform(X_valid)\ny_train = y_train / 100\ny_valid = y_valid / 100\n\ninput_shape = [X_train.shape[1]]\nprint(\"Input shape: {}\".format(input_shape))","metadata":{"execution":{"iopub.status.busy":"2024-05-20T20:37:46.440576Z","iopub.execute_input":"2024-05-20T20:37:46.440968Z","iopub.status.idle":"2024-05-20T20:38:01.306797Z","shell.execute_reply.started":"2024-05-20T20:37:46.440943Z","shell.execute_reply":"2024-05-20T20:38:01.305771Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stderr","text":"2024-05-20 20:37:50.034273: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-05-20 20:37:50.034396: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-05-20 20:37:50.183093: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"},{"name":"stdout","text":"Input shape: [18]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# 1) Add Dropout to Spotify Model\n\nHere is the last model from Exercise 4. Add two dropout layers, one after the `Dense` layer with 128 units, and one after the `Dense` layer with 64 units. Set the dropout rate on both to `0.3`.","metadata":{}},{"cell_type":"code","source":"# YOUR CODE HERE: Add two 30% dropout layers, one after 128 and one after 64\nmodel = keras.Sequential([\n    layers.Dense(128, activation='relu', input_shape=input_shape),\n    layers.Dropout(rate=0.3),\n    layers.Dense(64, activation='relu'),\n    layers.Dropout(rate=0.3),\n    layers.Dense(1)\n])\n\n# Check your answer\nq_1.check()","metadata":{"lines_to_next_cell":2,"execution":{"iopub.status.busy":"2024-05-20T20:40:45.500810Z","iopub.execute_input":"2024-05-20T20:40:45.501185Z","iopub.status.idle":"2024-05-20T20:40:45.551749Z","shell.execute_reply.started":"2024-05-20T20:40:45.501157Z","shell.execute_reply":"2024-05-20T20:40:45.550848Z"},"trusted":true},"execution_count":9,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"1_Q1\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct","text/markdown":"<span style=\"color:#33cc33\">Correct</span>"},"metadata":{}}]},{"cell_type":"code","source":"# Lines below will give you a hint or solution code\nq_1.hint()\nq_1.solution()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T20:40:00.999432Z","iopub.execute_input":"2024-05-20T20:40:01.001340Z","iopub.status.idle":"2024-05-20T20:40:01.013150Z","shell.execute_reply.started":"2024-05-20T20:40:01.001303Z","shell.execute_reply":"2024-05-20T20:40:01.012307Z"},"trusted":true},"execution_count":5,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"interactionType\": 2, \"questionType\": 2, \"questionId\": \"1_Q1\", \"learnToolsVersion\": \"0.3.4\", \"valueTowardsCompletion\": 0.0, \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\", \"outcomeType\": 4}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Hint: Your answer should look something like:\n```python\nmodel = keras.Sequential([\n    # Dense\n    # Dropout\n    # Dense\n    # Droput\n    # Dense\n])\n```","text/markdown":"<span style=\"color:#3366cc\">Hint:</span> Your answer should look something like:\n```python\nmodel = keras.Sequential([\n    # Dense\n    # Dropout\n    # Dense\n    # Droput\n    # Dense\n])\n```\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"interactionType\": 3, \"questionType\": 2, \"questionId\": \"1_Q1\", \"learnToolsVersion\": \"0.3.4\", \"valueTowardsCompletion\": 0.0, \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\", \"outcomeType\": 4}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Solution: \n```python\n\nmodel = keras.Sequential([\n    layers.Dense(128, activation='relu', input_shape=input_shape),\n    layers.Dropout(0.3),\n    layers.Dense(64, activation='relu'),\n    layers.Dropout(0.3),\n    layers.Dense(1)\n])\n\n```","text/markdown":"<span style=\"color:#33cc99\">Solution:</span> \n```python\n\nmodel = keras.Sequential([\n    layers.Dense(128, activation='relu', input_shape=input_shape),\n    layers.Dropout(0.3),\n    layers.Dense(64, activation='relu'),\n    layers.Dropout(0.3),\n    layers.Dense(1)\n])\n\n```"},"metadata":{}}]},{"cell_type":"markdown","source":"Now run this next cell to train the model see the effect of adding dropout.","metadata":{}},{"cell_type":"code","source":"model.compile(\n    optimizer='adam',\n    loss='mae',\n)\nhistory = model.fit(\n    X_train, y_train,\n    validation_data=(X_valid, y_valid),\n    batch_size=512,\n    epochs=50,\n    verbose=0,\n)\nhistory_df = pd.DataFrame(history.history)\nhistory_df.loc[:, ['loss', 'val_loss']].plot()\nprint(\"Minimum Validation Loss: {:0.4f}\".format(history_df['val_loss'].min()))","metadata":{"execution":{"iopub.status.busy":"2024-05-20T20:41:06.461444Z","iopub.execute_input":"2024-05-20T20:41:06.461794Z","iopub.status.idle":"2024-05-20T20:41:17.816114Z","shell.execute_reply.started":"2024-05-20T20:41:06.461766Z","shell.execute_reply":"2024-05-20T20:41:17.815204Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"Minimum Validation Loss: 0.1933\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# 2) Evaluate Dropout\n\nRecall from Exercise 4 that this model tended to overfit the data around epoch 5. Did adding dropout seem to help prevent overfitting this time?","metadata":{}},{"cell_type":"code","source":"# View the solution (Run this cell to receive credit!)\nq_2.check()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T20:41:30.068559Z","iopub.execute_input":"2024-05-20T20:41:30.068925Z","iopub.status.idle":"2024-05-20T20:41:30.075277Z","shell.execute_reply.started":"2024-05-20T20:41:30.068895Z","shell.execute_reply":"2024-05-20T20:41:30.074599Z"},"trusted":true},"execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 4, \"questionId\": \"2_Q2\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct: \n\n\nFrom the learning curves, you can see that the validation loss remains near a constant minimum even though the training loss continues to decrease. So we can see that adding dropout did prevent overfitting this time. Moreover, by making it harder for the network to fit spurious patterns, dropout may have encouraged the network to seek out more of the true patterns, possibly improving the validation loss some as well).","text/markdown":"<span style=\"color:#33cc33\">Correct:</span> \n\n\nFrom the learning curves, you can see that the validation loss remains near a constant minimum even though the training loss continues to decrease. So we can see that adding dropout did prevent overfitting this time. Moreover, by making it harder for the network to fit spurious patterns, dropout may have encouraged the network to seek out more of the true patterns, possibly improving the validation loss some as well).\n"},"metadata":{}}]},{"cell_type":"markdown","source":"Now, we'll switch topics to explore how batch normalization can fix problems in training.\n\nLoad the *Concrete* dataset. We won't do any standardization this time. This will make the effect of batch normalization much more apparent.","metadata":{}},{"cell_type":"code","source":"import pandas as pd\n\nconcrete = pd.read_csv('../input/dl-course-data/concrete.csv')\ndf = concrete.copy()\n\ndf_train = df.sample(frac=0.7, random_state=0)\ndf_valid = df.drop(df_train.index)\n\nX_train = df_train.drop('CompressiveStrength', axis=1)\nX_valid = df_valid.drop('CompressiveStrength', axis=1)\ny_train = df_train['CompressiveStrength']\ny_valid = df_valid['CompressiveStrength']\n\ninput_shape = [X_train.shape[1]]","metadata":{"execution":{"iopub.status.busy":"2024-05-20T20:42:00.260307Z","iopub.execute_input":"2024-05-20T20:42:00.260665Z","iopub.status.idle":"2024-05-20T20:42:00.279693Z","shell.execute_reply.started":"2024-05-20T20:42:00.260636Z","shell.execute_reply":"2024-05-20T20:42:00.278786Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"markdown","source":"Run the following cell to train the network on the unstandardized *Concrete* data.","metadata":{}},{"cell_type":"code","source":"model = keras.Sequential([\n    layers.Dense(512, activation='relu', input_shape=input_shape),\n    layers.Dense(512, activation='relu'),    \n    layers.Dense(512, activation='relu'),\n    layers.Dense(1),\n])\nmodel.compile(\n    optimizer='sgd', # SGD is more sensitive to differences of scale\n    loss='mae',\n    metrics=['mae'],\n)\nhistory = model.fit(\n    X_train, y_train,\n    validation_data=(X_valid, y_valid),\n    batch_size=64,\n    epochs=100,\n    verbose=0,\n)\n\nhistory_df = pd.DataFrame(history.history)\nhistory_df.loc[0:, ['loss', 'val_loss']].plot()\nprint((\"Minimum Validation Loss: {:0.4f}\").format(history_df['val_loss'].min()))","metadata":{"execution":{"iopub.status.busy":"2024-05-20T20:42:15.620492Z","iopub.execute_input":"2024-05-20T20:42:15.620852Z","iopub.status.idle":"2024-05-20T20:42:26.682760Z","shell.execute_reply.started":"2024-05-20T20:42:15.620826Z","shell.execute_reply":"2024-05-20T20:42:26.681803Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"Minimum Validation Loss: nan\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"Did you end up with a blank graph? Trying to train this network on this dataset will usually fail. Even when it does converge (due to a lucky weight initialization), it tends to converge to a very large number.\n\n# 3) Add Batch Normalization Layers\n\nBatch normalization can help correct problems like this.\n\nAdd four `BatchNormalization` layers, one before each of the dense layers. (Remember to move the `input_shape` argument to the new first layer.)","metadata":{}},{"cell_type":"code","source":"# YOUR CODE HERE: Add a BatchNormalization layer before each Dense layer\nmodel = keras.Sequential([\n    layers.BatchNormalization(input_shape=input_shape),\n    layers.Dense(512, activation='relu'),\n    layers.BatchNormalization(),\n    layers.Dense(512, activation='relu'),\n    layers.BatchNormalization(),\n    layers.Dense(512, activation='relu'),\n    layers.BatchNormalization(),\n    layers.Dense(1),\n])\n\n# Check your answer\nq_3.check()","metadata":{"lines_to_next_cell":0,"execution":{"iopub.status.busy":"2024-05-20T20:45:17.029768Z","iopub.execute_input":"2024-05-20T20:45:17.030115Z","iopub.status.idle":"2024-05-20T20:45:17.166472Z","shell.execute_reply.started":"2024-05-20T20:45:17.030089Z","shell.execute_reply":"2024-05-20T20:45:17.165440Z"},"trusted":true},"execution_count":17,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"3_Q3\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct","text/markdown":"<span style=\"color:#33cc33\">Correct</span>"},"metadata":{}}]},{"cell_type":"code","source":"# Lines below will give you a hint or solution code\nq_3.hint()\n# q_3.solution()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T20:45:28.377784Z","iopub.execute_input":"2024-05-20T20:45:28.378254Z","iopub.status.idle":"2024-05-20T20:45:28.386374Z","shell.execute_reply.started":"2024-05-20T20:45:28.378224Z","shell.execute_reply":"2024-05-20T20:45:28.385401Z"},"trusted":true},"execution_count":18,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"interactionType\": 2, \"questionType\": 2, \"questionId\": \"3_Q3\", \"learnToolsVersion\": \"0.3.4\", \"valueTowardsCompletion\": 0.0, \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\", \"outcomeType\": 4}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Hint: Your answer should look something like:\n```python\nmodel = keras.Sequential([\n    # Batch Normalization\n    # Dense\n    # Batch Normalization\n    # Dense\n    # Batch Normalization\n    # Dense\n    # Batch Normalization\n    # Dense\n])\n```","text/markdown":"<span style=\"color:#3366cc\">Hint:</span> Your answer should look something like:\n```python\nmodel = keras.Sequential([\n    # Batch Normalization\n    # Dense\n    # Batch Normalization\n    # Dense\n    # Batch Normalization\n    # Dense\n    # Batch Normalization\n    # Dense\n])\n```\n"},"metadata":{}}]},{"cell_type":"markdown","source":"Run the next cell to see if batch normalization will let us train the model.","metadata":{}},{"cell_type":"code","source":"model.compile(\n    optimizer='sgd',\n    loss='mae',\n    metrics=['mae'],\n)\nEPOCHS = 100\nhistory = model.fit(\n    X_train, y_train,\n    validation_data=(X_valid, y_valid),\n    batch_size=64,\n    epochs=EPOCHS,\n    verbose=0,\n)\n\nhistory_df = pd.DataFrame(history.history)\nhistory_df.loc[0:, ['loss', 'val_loss']].plot()\nprint((\"Minimum Validation Loss: {:0.4f}\").format(history_df['val_loss'].min()))","metadata":{"execution":{"iopub.status.busy":"2024-05-20T20:45:35.587849Z","iopub.execute_input":"2024-05-20T20:45:35.588195Z","iopub.status.idle":"2024-05-20T20:45:47.254660Z","shell.execute_reply.started":"2024-05-20T20:45:35.588171Z","shell.execute_reply":"2024-05-20T20:45:47.253695Z"},"trusted":true},"execution_count":19,"outputs":[{"name":"stdout","text":"Minimum Validation Loss: 3.7789\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAAnYAAAHWCAYAAAD6oMSKAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8WgzjOAAAACXBIWXMAAA9hAAAPYQGoP6dpAAB9P0lEQVR4nO3dd3hUVeLG8e/MpEMakEBCQofQIRSpgiBiQVTAxiqWde29/FbXtazY66qra9dVEATFAlhBikoVaQFCLyHUJJDeZ+7vj5MEIgkkpEwmeT/PkyeTO3fuPclJeXOqzbIsCxERERHxeHZ3F0BEREREqoeCnYiIiEg9oWAnIiIiUk8o2ImIiIjUEwp2IiIiIvWEgp2IiIhIPaFgJyIiIlJPKNiJiIiI1BNe7rx5YWEhaWlp+Pr6YrcrY4qIiIj8mcvlIi8vj+DgYLy8Th7d3Brs0tLS2L17tzuLICIiIuIR2rRpQ9OmTU96jluDna+vL2AK6u/vX6P3cjqdbN26lU6dOuFwOGr0XlJ1qi/PovryLKovz6L68iw1UV85OTns3r27JDedjFuDXXH3q7+/PwEBATV6L6fTCUBAQIB+MDyA6suzqL48i+rLs6i+PEtN1ldFhq1pYJuIiIhIPaFgJyIiIlJPKNiJiIiI1BMKdiIiIiL1hIKdiIiISD2hYCciIiJSTyjYiYiIiNQTCnYiIiIi9YSCnYiIiEg9oWAnIiIiUk8o2ImIiEidNWnSJJ5++ml3F8NjKNiJiIiI1BMKdiIiIiL1hIKdiIiIeIS0tDT+/ve/079/f3r16sXf/vY3du/eXfL8vn37uOWWW+jfvz+9e/dmzJgxLF68uOS1999/PwMHDqRnz56MHj2aWbNmuekzqTle7i6AiIiIuIdlWeQUOGv1nv7eDmw222m99qGHHmLPnj289dZbNG7cmBdffJGbbrqJb7/9Fm9vbyZPnkxBQQFTp04lICCA7du3ExAQAMBrr73Gjh07eO+99wgNDSUhIYHc3Nzq/NTqhAYT7HanZLFyXy49e1o4HO4ujYiIiHtZlsWlby/jjz1Ha/W+/VqH8vktgyod7nbv3s2CBQuYPn06ffr0AeCll17irLPOYv78+Zx//vns37+fc889l5iYGACio6NLXr9//366dOlCjx49AIiKiqqmz6huaTBdsQ9/tYHnl6Zy+/S1ZOYVurs4IiIibnd67WbusWPHDry8vOjVq1fJsdDQUNq2bcuOHTsAuOaaa3jrrbe48soref3119m8eXPJuRMnTuS7777j4osv5oUXXmD16tW1/jnUhgbTYnfNwNb8secoP206xPj/LuG9a/rRumkjdxdLRETELWw2G5/fMsijumJP5bLLLmPo0KEsWrSIJUuW8O677/Lggw8yadIkhg8fzsKFC1m8eDFLlizhuuuu46qrruLBBx+skbK4S4NpsTuvewuePKsJ4YG+bD2UyUVvLOG3bcnuLpaIiIjb2Gw2Any8avXtdENd+/btKSwsZN26dSXHjh49yq5du+jQoUPJsYiICCZOnMgbb7zB9ddfz8yZM0uea9KkCePGjeOll17i4YcfZsaMGaf/xaujKhXspk2bxtixY+nTpw99+vThiiuuKJltAmYRwZiYmFJvjz32WLUX+nR1aurD17cNond0CGk5BVzz4Qre/3UnlmW5u2giIiJyEm3atOHss8/m0UcfZdWqVWzevJn/+7//o3nz5px99tkAPP300/z666/s3buXjRs3smLFCtq3bw+YyRPz589nz549bNu2jUWLFpU8V59Uqiu2RYsWPPDAA7Ru3RrLsvj666+5/fbb+eqrr+jYsSMAl19+OXfddVfJa/z9/au3xFXUPMiPz24ayD+/2sCs1Yk89W08Ww9l8PS4Hng7GkwDpoiIiMd59tlnefrpp7nlllsoKCigX79+vPvuu3h7ewPgcrmYPHkyBw8epHHjxpx55pn84x//AMDb25tXXnmFffv24efnR9++fXnllVfc+enUiEoFu5EjR5b6+N5772X69OmsXbu2JNj5+fkRFhZWfSWsAX7eDl66rCfdIoN46ttNzFyVyL7UHP57VV+C/b3dXTwREREpMmXKlJLHwcHBvPDCC+We++ijj5b73G233cZtt91WrWWri0578oTT6eSHH34gOzub2NjYkuNz5sxh9uzZhIWFMWLECG677bZTtto5nU6czpodvFl8/ePvc+2gVrRq4s9dn61lyfYULn1rKR9c05eWoXWrlbEhKqu+pO5SfXkW1ZdnUX15lpqor8pcy2ZVcoDZli1buPLKK8nLyyMgIICXX36Z4cOHAzBjxgwiIyMJDw9ny5YtvPTSS/Ts2ZM33nijzGtlZ2cTHx9fmdvXiJ1HC3j2t6McyXUR4mvnH0ND6dBELXciIiJSd3Tp0qVkweXyVDrY5efnc+DAATIyMvjxxx/5/PPPmTp1aqkZKcWWLVvGddddx7x582jVqtUJzxcHu06dOp2yoFXldDqJi4ujR48eOMpYofhAWi5/++QPNh/MwM/bzquX9+Kcrs1rtExSvlPVl9Qtqi/PovryLKovz1IT9ZWdnc3WrVsrFOwq3RXr4+ND69atAejevTtxcXF88sknTJ48+YRzixcR3LNnT5nBrpjD4ai1b9by7hXVpBGf3zKIO6atYfHWJG6btobnJvTk8n7RZVxFakttfm9I1am+PIvqy7OovjxLddZXZa5T5WmgLpeL/Pz8Mp8r7mat65MpigX6efPBtf24ol80Lgv+/sV6Pvxtl7uLJSIiIlIhlWqxe/nllxk2bBgRERFkZWUxd+5cVq5cyQcffEBCQgJz5sxh+PDhhISEsGXLFp599ln69+9P586da6r8FWaL+5x2v0/Blj4Uos+AqH7gF3zCeV4OO89N6EGQvxfv/bqLyXM3kZ5bwN1nd6yxlbJFREREqkOlgl1KSgoPPvgghw8fJjAwkJiYGD744AOGDBnCgQMHWLZsGZ988gnZ2dlEREQwevToOjO12LZuGqEHf4ODvxUfgbAYE/LOuAla9Dh2rs3Gwxd0IcjPm5fnbeXV+dtIzynk0Qu7KNyJiIhInVWpYPfMM8+U+1xERARTp06tcoFqimv8++z78XWiOIh93+9wdDckbTZva6fBmffDmQ+Alw9gwt2dZ3ck0M+Lf83ZxIdLdpGRW8Cz43vgpYWMRUREpA467XXsPE5AU5LajqNl797gcEBmEiT+Dms/hc1zYfHzED8XLvkvRPYuedl1Q9oS6OfN/32xjs//SMRlwYuX9sRuV8udiIiI1C0Nt+mpcRh0vgCu/BQu+x8ENIXDG+G9kfDzk1CYV3LqhL5RvPmXPjjsNmatTuRfczZqf1kREREPMXLkSP73v/9V6NyYmBjmz59fswWqQQ032B2v2zi4fSV0Gw+WE359yQS81ISSU87vEcHLl/XCZoNPlu3hhR+3uLHAIiIiIidSsCvWqBlc9hFcPgUahcGhDfDe2bDvj5JTLoltydOXmEkWby3awZsLt7urtCIiIiInULD7s64XwU2LoHl3yDoMH42BTd+UPP2XAa345wVdAHjxxy38b4nWuRMREakpM2bMYOjQobhcrlLHb731Vv7xj3+QkJDArbfeyuDBg4mNjWXChAksXbq02u6/ZcsWrrnmGnr27MmAAQN49NFHycrKKnl+xYoVXHrppfTu3Zt+/fpx1VVXkZSUBMDmzZuZNGkSsbGx9OnTh/HjxxMXF1dtZSuLgl1ZgqPgrz9Ah3OgMAdmXgNLXoOicXU3DmvH3Wd3BOBfczbxxR+J7iytiIjI6bEsyM+q3bdKjlE/77zzSE1NZcWKFSXHUlNT+fXXX7nooovIzs5m+PDh/O9//+Orr77izDPP5JZbbmH//v1V/vJkZ2dzww03EBwczBdffMGrr77K0qVLefLJJwEoLCzk9ttvp3///syePZsZM2Zw2WWXlSyN9sADD9CiRQu++OILvvzyS2688Ua8vWt2L/qGMyu2snwDYeJn8MND8Pt7MO8xSNkBY14Ghzf3jOpIVl4h7/+2i4dmrSc61J8B7Zq6u9QiIiIVY1nw4bmwd8Wpz61O0QNN40kF14UNDg5m2LBhzJkzh0GDBgHw448/EhoayoABA7Db7aU2QrjnnnuYP38+CxYs4Oqrr65SUefOnUt+fj7PP/98yR6tjz32GLfccgsPPPAAXl5eZGRkMGLEiJKtU9u0acPatWsB2L9/PzfccAPt27cvea6mqcXuZBxecMGLcN5zgA1Wfwxf/BWcBdhsNv45pgtje0VS6LK49dPV7D2S7e4Si4iIVIJnLN01duxYfvrpp5ItTOfMmcOYMWOw2+1kZWXx/PPPc/7559OvXz9iY2PZsWNHtbTY7dixg5iYmJJQB9CnTx9cLhe7du0iJCSE8ePHc8MNN3DLLbfw8ccfl3TDAlx//fU88sgjXHfddbz77rskJCSUdZtqpRa7U7HZYOCtENIKPr8O4meb95d+hM3Lhxcm9GR3chZx+9L428ermHXbYBr76ssqIiJ1nM1mWs4KarlRwjugwq11xUaOHMkjjzzCokWL6NGjB6tWreIf//gHAM8//zxLly7lwQcfpFWrVvj5+XHXXXdRUFBQE6U/wbPPPsukSZP49ddf+f7773n11Vd58MEH6d27N3feeScXXnghixcv5pdffuH111/n3//+N+ecc06NlUctdhXVeQxcOR0cvmZB45nXQGEe/j4O3rumH2GBvmw5lMG9M9bicmmNOxER8QA2G/g0qt2309ia09fXl9GjRzNnzhzmzp1L27Zt6datGwBr1qxh3LhxnHPOOcTExNCsWTP27dtXLV+e9u3bs2XLFrKzj4Xf1atXY7fbadu2bcmxrl27cvPNN/PZZ5/RsWPHUpM32rZty3XXXceHH37I6NGjmTVrVrWUrTwKdpXRcRRMnA5efrD1e5hxNRTk0iLYj3cn9cXHy868TYd4eZ7WuBMREalOY8eOZdGiRcyaNYuxY8eWHG/dujXz5s0jPj6ezZs3c//9958wg7Yq9/Tx8eGhhx5i69atLF++nCeffJKLL76YZs2asXfvXl5++WXWrFnDvn37+O2339izZw+RkZHk5uYyefJkVqxYwb59+/jjjz+Ii4srGW9XU9RnWFkdzoa/zIBpV8K2n2DGVXDFVGJbhfL8hB7cO2Mdby7cQafmgVzcu6W7SysiIlIvDBw4kODgYHbt2lUq2D300EM8/PDDXHnllYSGhnLjjTeWWo6kKvz9/fnggw94+umnufTSS/H392f06NE89NBDJc/v3LmTr776itTUVMLDw5k4cSJDhgzBbreTmprKgw8+SHJyMqGhoYwePZq77rqrWspWHpvlxr2xsrOziY+Pp0uXLqUGJtYEp9PJ2rVr6d27Nw6Ho+oX3PULTLvCjE3oMMrMoHV48+z38byzeCe+XnZm3zGUmBaBVb9XA1Tt9SU1SvXlWVRfnkX15Vlqor4qk5fUFXu62g6Dq74wg0C3z4dv7gDL4u/ndmZ4pzDyCl3c/dka8gqd7i6piIiINBAKdlXRZghc9jHYHLD+M5j/Lxx2Gy9d1oumjXzYfDCDl3/a6u5SioiICDB79mxiY2PLfBszZoy7i1ctNMauqjqNhov+A9/cBktehcAWhA28lecm9OTGT1bx3q87GRETzqD2WrxYRETEnUaOHEmvXr3KfM7Lq35EovrxWbhb7FWQeRB+ngw//AMah3NO9wlc2T+az37fy/0z1/L9PcMI9q/ZbURERESkfI0bN6Zx48buLkaNUldsdRl6H5xxM2DBlzfDzsU8emFXWjcNYH9aLo9/s8HdJRQREZF6TsGuuthscN6z0PUScBXAZ1fRKHMP/76iNw67ja/X7mf2uqpvbyIiIiJSHgW76mR3wLh3oNVgyM+AWX+jT8vG3DGiAwCPfBXH/tQcNxdSRERE6isFu+rm7QcT3gO/ENi/GhY9xx0jO9ArOoT03EIeU5esiIiI1BAFu5oQHAVjXzWPf3sF78QVvHxZT7zsNubHH2bhlsNuLZ6IiIjUTwp2NaXbOOj1F7Bc8OVNdAhycf2QNgBMnrNJCxeLiIhItVOwq0nnPw8hrSEtAb77P+46uyNhgb7sSs7iw992u7t0IiIiUs8o2NUkvyAY/x7Y7LB+BoHbvuGh8zoD8J8F2ziYluvmAoqIiEh9omBX01oNgGF/N4/n3se4tk76tAohO9/Js9/Hu7dsIiIiUq8o2NWGYf8HUf0hLw37t/cy+aJu2Gzwzdr9rNx1xN2lExERkXpCwa42OLzgkrfB4QM7fqZ72iKu7N8KgMdnb8TpstxcQBEREakPFOxqS7MOMPRe8/iHf/B/I1oS7O9N/IF0pq1McG/ZREREpF5QsKtNQ++F0DaQsZ8mK1/m/tGdAHj5py1k5hW6t2wiIiLi8RTsapO3P1zwknm8/C3+0jqDdmGNSM0uYOryPe4tm4iIiHg8Bbva1vEc6DIWLCde3z/A7cPbAfD+rzvJydeixSIiInL6FOzc4bznwLsR7F3OxbbFRDfxJzkzn89+11g7EREROX0Kdu4QHAVnPQSA1/zHuHtQMwDeWbxTW42JiIjIaVOwc5eBt0JYF8g5wrgj79EiyI+D6bl8uXqfu0smIiIiHkrBzl0c3nDhK+bhmik8FJsPwH8XbafQ6XJnyURERMRDKdi5U+vB0H0CYDH20Fs0DfBm75EcZq/b7+6SiYiIiAdSsHO3sx8Dhw+O3YuZ3O0gAG8u3K7dKERERKTSFOzcLbQNDLgZgPMOvEETPzs7krL4YcNB95ZLREREPI6CXV1w5v3gH4ojeQsvdFgPwH8WbMOy1GonIiIiFadgVxf4h8LwBwEYeeA9wnzy2Xwwg4VbDru5YCIiIuJJFOzqin43QGhb7FlJvNJyMQBTl2vBYhEREak4Bbu6wssHznkCgCFJ02nOERZtOcy+1Bw3F0xEREQ8hYJdXdLlIogegL0wl+dDZ+OyYMbve91dKhEREfEQCnZ1ic0Go58GYHjOPDrbEpj5+14tWCwiIiIVomBX10T3hy4XYcPiJr/5HEzPZeGWJHeXSkRERDyAgl1ddMZNAIyxLSWAXKav1CQKEREROTUFu7qozVBo0h5fVzYXOpZpEoWIiIhUiIJdXWSzQZ9rALgx4DcziUKtdiIiInIKlQp206ZNY+zYsfTp04c+ffpwxRVXsHjx4pLn8/LyeOKJJxgwYACxsbHceeedJCcnV3uhG4TefwG7Fx0L4ulk28uMVZpEISIiIidXqWDXokULHnjgAb788ktmzZrFwIEDuf3229m2bRsAzzzzDAsXLuTVV19lypQpHD58mDvuuKNGCl7vNQ6HmPMBuN5vMYfS81iwWTtRiIiISPkqFexGjhzJ8OHDadOmDW3btuXee+8lICCAtWvXkpGRwaxZs3jooYcYNGgQ3bt355lnnmHNmjWsXbu2hopfz/W5FoBL7L/hS74mUYiIiMhJnfYYO6fTybfffkt2djaxsbFs2LCBgoICBg8eXHJO+/btiYyMVLA7Xe1HQnA0/s50zrX/zqKtSSQezXZ3qURERKSO8qrsC7Zs2cKVV15JXl4eAQEBvPnmm3To0IH4+Hi8vb0JCgoqdX7Tpk1JSjr5OmxOpxOn01nZolRK8fVr+j7VzdbrL9h/eZ6bG//G7PQhfLYygXtHdXR3sWqcp9ZXQ6X68iyqL8+i+vIsNVFflblWpYNd27Zt+frrr8nIyODHH3/kwQcfZOrUqZW9TClbt26t0usrIy4urtbuVR28vXvTAxvd8tfR2naQGSvsnNU0E5vN5u6i1QpPq6+GTvXlWVRfnkX15VncVV+VDnY+Pj60bt0agO7duxMXF8cnn3zC+eefT0FBAenp6aVa7VJSUggLCzvpNTt16kRAQEBli1IpTqeTuLg4evTogcPhqNF7Vbs9Z8P2+VzlvZhnsq/Ap3l7ukUGnfp1Hsyj66sBUn15FtWXZ1F9eZaaqK/s7OwKN4JVOtj9mcvlIj8/n+7du+Pt7c2yZcs499xzAdi5cyf79++nd+/eJ72Gw+GotW/W2rxXtelzLWyfzxXev/BC/gTmxR+mZ3Sou0tVKzyyvhow1ZdnUX15FtWXZ6nO+qrMdSoV7F5++WWGDRtGREQEWVlZzJ07l5UrV/LBBx8QGBjIhAkTeO655wgODqZx48Y89dRTxMbGnjLYySnEnA+NwgnOOszZ9jX8sCGE+0fHuLtUIiIiUsdUKtilpKTw4IMPcvjwYQIDA4mJieGDDz5gyJAhADz88MPY7Xbuuusu8vPzGTp0KI8//niNFLxBcXibBYuXvMoVXov56+H+7EjKpH1YY3eXTEREROqQSgW7Z5555qTP+/r68vjjjyvM1YSeV8CSVxnq2IAv+fy48SC3ndXB3aUSERGROkR7xXqK8C4Q1BIfK58B9nh+3HDQ3SUSERGROkbBzlPYbNDhbACG29ezLjGN/ak5bi6UiIiI1CUKdp6kwygAzvXdAMBPG9VqJyIiIsco2HmStsPB5iDKuZcoWxI/KNiJiIjIcRTsPIl/CESfAcBw+zpW7jpCSmaee8skIiIidYaCnacpGmd3YcAmXBbMjz/k5gKJiIhIXaFg52mKxtn1da3Hm0J+0OxYERERKaJg52la9IKAZvg4s+lr38qS7Slk5Ba4u1QiIiJSByjYeRq7vaQ79uLGm8h3uli4JcnNhRIREZG6QMHOExV1x470igPQYsUiIiICVHJLMakj2o8EbDTP3kY4R1m4xUFugRM/b4e7SyYiIiJupBY7T9SoGUTGAjC2cTzZ+U5W7jri5kKJiIiIuynYeaqi7tgLAzYBsGRHsjtLIyIiInWAgp2nKgp23XJWYcfF0u0pbi6QiIiIuJuCnadq2Rf8gvEpSKeXbQcb9qeRlq1lT0RERBoyBTtP5fCCdiMAGBcYj2XBsp1qtRMREWnIFOw8WVF37Aiv9QAs1Tg7ERGRBk3BzpMVLVQclR1PCBks2a5gJyIi0pAp2HmyoEgI64wNi4GOzexIyuJgWq67SyUiIiJuomDn6VoPAeD8wJ0ALNupVjsREZGGSsHO07UxwW6APR6AJVr2REREpMFSsPN0rQYD0Dx7G4Fks3R7MpZlublQIiIi4g4Kdp4uKAKatDPj7Ly2sT8tl90p2e4ulYiIiLiBgl190Nq02l0YbMbZadkTERGRhknBrj5oPRSAM+ybAbS9mIiISAOlYFcfFLXYNc+Mx59clu5IxuXSODsREZGGRsGuPghpBUFR2K1CBvns5Gh2AfEH091dKhEREallCnb1gc1WsuzJxaG7AHXHioiINEQKdvVFUXfsGbaicXaaQCEiItLgKNjVF0U7UDTP2IAPBazcdYQCp8vNhRIREZHapGBXXzTtAI3CsTvzGBqQQFa+k3V7U91dKhEREalFCnb1hc1W0h17SehuQNuLiYiINDQKdvVJUXdsPzYBsGbvUXeWRkRERGqZgl19UryeXdo6HJiuWO0bKyIi0nAo2NUn4V3BLwRHYTa9vRI4ml3A3iM57i6ViIiI1BIFu/rEbj9h39i1ialuLJCIiIjUJgW7+qYo2A1ymPXsNDNWRESk4VCwq2+Kgl27nDhsuFivFjsREZEGw8vdBZBq1qIX+DTGJz+dzra9xO3zotDpwsuhDC8iIlLf6a99fePwgugBAAzz2UpugYuthzLdXCgRERGpDQp29VHrQQCMCNgBwDp1x4qIiDQICnb1UVGLXVfnFkATKERERBoKjbGrjyL7gM1BUP4hWpDC2r2B7i6RiIiI1AK12NVHvo2heTcA+ti3se1wJtn5hW4ulIiIiNQ0Bbv6KvoMAIb67cTpsti4P93NBRIREZGapmBXXxWNsxvoXTSBQuPsRERE6j0Fu/oqqj8ArfO34Us+axXsRERE6j0Fu/oqtA00CsNhFdLNtltLnoiIiDQACnb1lc1W0h3b176VvUdySMnMc3OhREREpCYp2NVnRd2xZ/rvAmD9vjR3lkZERERqWKWC3TvvvMOECROIjY1l0KBB3HbbbezcubPUOZMmTSImJqbU22OPPVathZYKKpoZ29vaAliaQCEiIlLPVWqB4pUrV3LVVVfRo0cPnE4nr7zyCjfccAPffvstAQEBJeddfvnl3HXXXSUf+/v7V1+JpeIiY8HuRZDzCFG2ZNbtDXd3iURERKQGVSrYffDBB6U+fu655xg0aBAbN26kf//+Jcf9/PwICwurnhLK6fP2hxY9Yf9q+ti28VtiSyzLwmazubtkIiIiUgOqtKVYRkYGAMHBwaWOz5kzh9mzZxMWFsaIESO47bbbTtpq53Q6cTqdVSnKKRVfv6bvU9fYovph37+afo5tzM4azJ7kTKKbBJz6hW7WUOvLU6m+PIvqy7OovjxLTdRXZa5lsyzLOp2buFwubr31VtLT05k+fXrJ8RkzZhAZGUl4eDhbtmzhpZdeomfPnrzxxhsnXCM7O5v4+PjTub1UUOi+hbRb/SRbbO04N+cp7hsYzJBodY2LiIh4mi5dupQa+laW026xe+KJJ9i2bRvTpk0rdfyKK64oeRwTE0NYWBjXXXcdCQkJtGrVqsxrderU6ZQFrSqn00lcXBw9evTA4XDU6L3qlLbNYPWTdLD24EceaY5Qevfu7O5SnVKDrS8PpfryLKovz6L68iw1UV/Z2dls3bq1QueeVrCbPHkyixYtYurUqbRo0eKk5/bq1QuAPXv2lBvsHA5HrX2z1ua96oTQVhAYgSPjAD1tO4nbF+FRn3+Dqy8Pp/ryLKovz6L68izVWV+VuU6lljuxLIvJkyczb948Pv74Y6Kjo0/5muKuVk2mcBObrWTZk772bcTtS8PlOq3edxEREanjKhXsnnjiCWbPns3LL79Mo0aNSEpKIikpidzcXAASEhJ488032bBhA4mJifz88888+OCD9O/fn86d6373X70VVRTsHNvIKXCy92i2mwskIiIiNaFSXbHFkyQmTZpU6vizzz7L+PHj8fb2ZtmyZXzyySdkZ2cTERHB6NGjue2226qvxFJ5RS12/RzbAYuthzJp3bSRe8skIiIi1a5SwW7Lli0nfT4iIoKpU6dWqUBSAyJ6gcOHEGcarW2H2Hoog3O6Nnd3qURERKSaaa/YhsDLFyJ6A9DHto1thzLcWx4RERGpEQp2DUXJBIqtbD2U6ebCiIiISE1QsGsoioJdH/t2tidl4tTMWBERkXpHwa6hKJoZG2NLwKswmz0pWW4ukIiIiFQ3BbuGIigCgqJw2Cx62neqO1ZERKQeUrBrSKL6AtDbtl0TKEREROohBbuGpGU/AGLt29l6WC12IiIi9Y2CXUMS1R8wwW7bwXQ3F0ZERESqm4JdQxLRC8vmINyWSk5yAgVOl7tLJCIiItVIwa4h8QmAFt0B6GZt1cxYERGRekbBroGxHT/OTjNjRURE6hUFu4amaJxdb/t2tmpmrIiISL2iYNfQRJkWux62Xew4mOresoiIiEi1UrBraJq0p8AnGD9bAc4Dce4ujYiIiFQjBbuGxm7HGdEHgLC0OPILNTNWRESkvlCwa4B8W5txdj1t29itmbEiIiL1hoJdA2SLPgOA3rYdbDmoCRQiIiL1hYJdQ9TS7Bnb3n6AvYmJbi6MiIiIVBcFu4YooAlp/q0AKEz8w82FERERkeqiYNdA5TaPBSA4Za17CyIiIiLVRsGugfJvNxCANrnx5BU63VwaERERqQ4Kdg1UYHsT7HrZtrPzsLYWExERqQ8U7BooW/Pu5ONNiC2LfTs3uLs4IiIiUg0U7BoqLx/2B3QGIH/3CjcXRkRERKqDgl0DltmsFwD+h9e4uSQiIiJSHRTsGjCv1mah4shMdcWKiIjUBwp2DVhY5yEAtHPuITdbEyhEREQ8nYJdA9Ykoh1JhOBtc7I/frm7iyMiIiJVpGDXgNnsdvb4xgCQsVs7UIiIiHg6BbsGLjOog3mQtMW9BREREZEqU7Br4FxNOwEQkL7DzSURERGRqlKwa+D8IroA0Cxnj5tLIiIiIlWlYNfANWndHYBQ6yjkHHVzaURERKQqFOwauOiI5hywmgCQmbjJzaURERGRqlCwa+Aa+XqRYI8CIDVBCxWLiIh4MgU7IcW/DQB5B+LdWxARERGpEgU7ISfYLHniOLLVzSURERGRqlCwE+xhZsmTwIydbi6JiIiIVIWCnRDQshsAoQUHoSDHzaURERGR06VgJ0RGtiLVaoQdC5K3ubs4IiIicpoU7IRWzRqx3WoJQK4mUIiIiHgsBTsh2N+bvUVLnmQkbnRzaUREROR0KdgJAKmN2gFQeGizm0siIiIip0vBTgDIDzVLnvge3e7mkoiIiMjpUrATALyadwYgKGcPOAvdXBoRERE5HQp2AkCTlu3JsXzwsgrh6G53F0dEREROg4KdANC6WSA7rQjzQfIW9xZGRERETouCnQDQpumxJU8KNIFCRETEIynYCQChAd7sdZglT3L2bXJzaUREROR0VCrYvfPOO0yYMIHY2FgGDRrEbbfdxs6dpfcXzcvL44knnmDAgAHExsZy5513kpycXK2Flupns9nIaNweAEtdsSIiIh6pUsFu5cqVXHXVVcycOZOPPvqIwsJCbrjhBrKzs0vOeeaZZ1i4cCGvvvoqU6ZM4fDhw9xxxx3VXnCpfs6mHQHwT9sJluXm0oiIiEhleVXm5A8++KDUx8899xyDBg1i48aN9O/fn4yMDGbNmsVLL73EoEGDABP0LrjgAtauXUvv3r2rreBS/QJaxFC4246PMwvS90NwS3cXSURERCqhSmPsMjIyAAgODgZgw4YNFBQUMHjw4JJz2rdvT2RkJGvXrq3KraQWRIcFs8dqbj5Qd6yIiIjHqVSL3fFcLhfPPPMMffr0oVOnTgAkJyfj7e1NUFBQqXObNm1KUlJSuddyOp04nc7TLUqFFF+/pu/jyVqF+rPDiqQ9B3Ad3ozVZrjbyqL68iyqL8+i+vIsqi/PUhP1VZlrnXawe+KJJ9i2bRvTpk073UuU2Lp1a5WvUVFxcXG1di9Pk5HrZLvVktH8QVL8UhJ9Bri7SKovD6P68iyqL8+i+vIs7qqv0wp2kydPZtGiRUydOpUWLVqUHG/WrBkFBQWkp6eXarVLSUkhLCys3Ot16tSJgICA0ylKhTmdTuLi4ujRowcOh6NG7+WpLMti/o9myZOgwiS3jolUfXkW1ZdnUX15FtWXZ6mJ+srOzq5wI1ilgp1lWTz55JPMmzePKVOmEB0dXer57t274+3tzbJlyzj33HMB2LlzJ/v37z9pSHA4HLX2zVqb9/JEWUEdIBMcKdvqxNdJ9eVZVF+eRfXlWVRfnqU666sy16lUsHviiSeYO3cu//3vf2nUqFHJuLnAwED8/PwIDAxkwoQJPPfccwQHB9O4cWOeeuopYmNjNSPWQ9jDYiATfPJSIPsIBDRxd5FERESkgioV7KZPnw7ApEmTSh1/9tlnGT9+PAAPP/wwdrudu+66i/z8fIYOHcrjjz9eTcWVmtYivCn7djalpS0FkrdCq4HuLpKIiIhUUKWC3ZYtp14Cw9fXl8cff1xhzkO1adqIHa5IWjpSIGmLgp2IiIgH0V6xUkrrpgFst4oWJk6uvdnKIiIiUnUKdlJKm6aNSoKdK2mzm0sjIiIilaFgJ6W0CPIj0R4BgDN5l5tLIyIiIpWhYCel2O02rOBW5nFGIliWm0skIiIiFaVgJycIaNYKp2XD4cyDrPK3ghMREZG6RcFOThDdLJiDFK1fl5rg3sKIiIhIhSnYyQlaN2tEolW0BVzqHvcWRkRERCpMwU5OEB3qT6LVzHygFjsRERGPoWAnJ4gM8T+uxU7BTkRExFMo2MkJIoL9SoJd4RF1xYqIiHgKBTs5QaCfN0e8WwDgUrATERHxGAp2UqbCwGgAHBl7tZadiIiIh1CwkzJ5hbbEpbXsREREPIqCnZQpPCSIg4SaDzSBQkRExCMo2EmZWob4aS07ERERD6NgJ2WKCNaSJyIiIp5GwU7KFBHip0WKRUREPIyCnZQp8rgWOyt1r5tLIyIiIhWhYCdlanHcIsWuoxpjJyIi4gkU7KRMft4OsvwiAbClJmgtOxEREQ+gYCflsodE4bJs2J25kJXs7uKIiIjIKSjYSbnCQgK1lp2IiIgHUbCTckWG+GstOxEREQ+iYCfligj201p2IiIiHkTBTsoVEeKvtexEREQ8iIKdlKv0tmIKdiIiInWdgp2UK6LUIsUKdiIiInWdgp2UKzzQlwPHd8VqLTsREZE6TcFOyuXlsOMMbInLsmErzNFadiIiInWcgp2cVLOQQA5pLTsRERGPoGAnJxVZamas1rITERGpyxTs5KRKLVKctte9hREREZGTUrCTk9IixSIiIp5DwU5O6vglTxTsRERE6jYFOzmpyBA/7T4hIiLiIRTs5KROWKRYa9mJiIjUWQp2clJNG/mQ7Agza9kVZEN2iruLJCIiIuVQsJOTstttNAs+fi07LXkiIiJSVynYySmZmbEaZyciIlLXKdjJKUVqZqyIiIhHULCTU4oI0Vp2IiIinkDBTk4pMsSffeqKFRERqfMU7OSU1BUrIiLiGRTs5JQi/rxIsdayExERqZMU7OSUIoL92V8c7AqyIfuIewskIiIiZVKwk1MK8vPC28ePfVZTcyB5q3sLJCIiImVSsJNTstlsRIb4s9nVyhw4tMG9BRIREZEyKdhJhUSE+BNvKdiJiIjUZQp2UiGRwX7HtdhtdG9hREREpEwKdlIhEcHHt9htApfLvQUSERGRE1Q62P3+++/ccsstDB06lJiYGObPn1/q+YceeoiYmJhSbzfccEO1FVjcIyLEj91WC/JtPlCQBUd3ubtIIiIi8idelX1BdnY2MTExTJgwgTvuuKPMc84880yeffbZko99fHxOv4RSJ7QM8ceJg122VsRY2804u6bt3V0sEREROU6lg93w4cMZPnz4Sc/x8fEhLCzstAsldU9EsB8AG5zRxNi2w8EN0PViN5dKREREjlfpYFcRK1euZNCgQQQFBTFw4EDuueceQkNDyz3f6XTidDproiil7nH8e6mc8Mam1TWuMJoJ3mAd3ICrBr+Wqi/PovryLKovz6L68iw1UV+VuVa1B7szzzyTc845h6ioKPbu3csrr7zCjTfeyIwZM3A4HGW+ZuvW2lvwNi4urtbuVd8E+drZXGAmUOTvXc2GtWtr/J6qL8+i+vIsqi/PovryLO6qr2oPdmPGjCl5XDx5YtSoUSWteGXp1KkTAQEB1V2UUpxOJ3FxcfTo0aPcgCkn1/WPlcTvNMHON+cgvTu3A7+gGrmX6suzqL48i+rLs6i+PEtN1Fd2dnaFG8FqpCv2eNHR0YSGhrJnz55yg53D4ai1b9bavFd90zUimOU7G5PmHU5wwWEcyZuhddl1Wl1UX55F9eVZVF+eRfXlWaqzvipznRpfx+7gwYOkpqZqMkU90CUiEIAd9jbmgHagEBERqVMq3WKXlZVFQkJCyceJiYnEx8cTHBxMcHAwb7zxBueeey7NmjVj7969vPjii7Ru3ZozzzyzWgsuta9LhOl2XZ3Xkj6gYCciIlLHVDrYbdiwgWuuuabk4+L16saNG8e//vUvtm7dytdff01GRgbh4eEMGTKEu+++W2vZ1QMdwhvjsNtYmx8FPmhrMRERkTqm0sFuwIABbNmypdznP/jggyoVSOouP28H7cMaEX/4T1uL2bUznYiISF2gv8hSKV0igthttaDQ7qutxUREROoYBTuplM4tgnDiYL93a3NA4+xERETqDAU7qZTimbEbXUXdsQcV7EREROoKBTuplK5FM2N/z4kwBzSBQkREpM5QsJNKCQv0pUkjHza5irtitcWNiIhIXaFgJ5Vis9noEhFIfHFXbGoC5Ka5t1AiIiICKNjJaejSIog0zNZigFn2RERERNxOwU4qrXgHih12zYwVERGpSxTspNI6F82MXZ3X0hxQsBMREakTFOyk0jqEN8bLbmNdfpQ5oJmxIiIidYKCnVSar5eDDuGN2WQVd8UWbS0mIiIibqVgJ6elc4tAs7WYzUdbi4mIiNQRCnZyWrpEmK3F9vm0MQc0zk5ERMTtFOzktBTPjN3kjDYHtLWYiIiI2ynYyWkpDnbLc4omUOxf48bSiIiICCjYyWkKC/SlWWMf1rramwP7/gDLcm+hREREGjgFOzltXSKCiLda47R7Q84RTaAQERFxMwU7OW1dIoLIx5sDfh3NgX2r3VsgERGRBk7BTk5b5xZmB4o4juuOFREREbdRsJPTVjyB4pesooWKFexERETcSsFOTlv7sMZ4O2ysyG9jDhxYB84Ct5ZJRESkIVOwk9Pm42WnQ3ggu6wWFHgHQmEuHN7k7mKJiIg0WAp2UiVdWgRiYedAoy7mgLpjRURE3EbBTqqkfXhjALZ4xZgDCnYiIiJuo2AnVdIyxB+ANc525kCigp2IiIi7KNhJlbQMNcFuSU4rcyBpM+RluLFEIiIiDZeCnVRJcYvdxvQArKAowIL9a91aJhERkYZKwU6qpHmQH152G4Uui9zwXuagxtmJiIi4hYKdVInDbqNFsB8AycHdzUEFOxEREbdQsJMqK+6O3e3X1RzQnrEiIiJuoWAnVVY8gSLe1g5sdkhPhIyDbi6ViIhIw6NgJ1UWVdRityvdBmGdzUG12omIiNQ6BTupsuIWu32pOdCyjzm4b5UbSyQiItIwKdhJlbUMCQBg39FsaNnXHNQEChERkVqnYCdVdnyLnRVZ3GK3BlwuN5ZKRESk4VGwkyqLKFruJLfAxZFGHcDLD/LS4MgON5dMRESkYVGwkyrz83YQFugLwL6MQojobZ5Qd6yIiEitUrCTalG8lt2+ozkaZyciIuImCnZSLcqeGatgJyIiUpsU7KRaFK9ll3g0B6L6m4MH1kH2ETeWSkREpGFRsJNqUarFLrQ1hHcDVyFs+d7NJRMREWk4FOykWpQaYwfQ7RLzftM37imQiIhIA6RgJ9WiVIsdQNeLzfsdCyA3zU2lEhERaVgU7KRaFLfYpeUUkJlXCGExZt9YV4G6Y0VERGqJgp1Ui0A/b4L8vIDjumOLW+1O1h1bmA9L34BDm2q4hCIiIvWfgp1Um5ahRXvGpmabA10vMe+3/wy56WW/aMlr8NM/4ZOLIfNwzRdSRESkHlOwk2pzwgSK8C7QtCM482DbTye+IPsILH3dPM46DF/epP1lRUREqkDBTqpNVNEEisTiCRQ227Hu2I1fnfiCJa9CXjo0aQ9e/rBzISz5d+0UVkREpB5SsJNqc0KLHRwLdtvnQ17msePpB2DFO+bxec/BBS+axwuehoTltVBaERGR+qfSwe7333/nlltuYejQocTExDB//vxSz1uWxWuvvcbQoUPp2bMn1113Hbt3766u8koddsKSJwAtekBoWyjMLd0d+8uL5lj0QOh4DsReDT0uA8sJs/4GOUdrufQiIiKer9LBLjs7m5iYGB5//PEyn3/vvfeYMmUK//rXv5g5cyb+/v7ccMMN5OXlVbmwUreV2WJns524WPGRXbD6Y/P47MfMOTYbXPhvaNIO0vZin3MXWFbtFV5ERKQeqHSwGz58OPfeey/nnHPOCc9ZlsUnn3zCrbfeyqhRo+jcuTMvvPAChw8fPqFlT+qf4ha7wxl55BU6jz1R3B277SfIz4ZFz5rtxjqMgjZDjp3nGwiXfgQOH2xbviVs99e1V3gREZF6oFrH2CUmJpKUlMTgwYNLjgUGBtKrVy/WrFlTnbeSOqhpIx/8vM231IHU3GNPRPSGkFZQkG1mwa6faY6PfPTEi0T2hnOeBCBq09uw4+eaLbSIiEg94lWdF0tKSgKgadOmpY43bdqU5OTkcl/ndDpxOp3lPl8diq9f0/dp6CKD/dmZnEXCkSyiQ/1Kjtu6XIR92RumtQ5wdbkYq3kPKKs++v0N9izDEf811sxJOCfOhDZDa+tTkNOgny/PovryLKovz1IT9VWZa1VrsDtdW7durbV7xcXF1dq9GqJARwEAy9dvoVFGQMnxAEcXuhQ9trCzqfk48tauLfc6tna30u7IQUIOLYdpl7Nt4AtkNelegyWX6qCfL8+i+vIsqi/P4q76qtZgFxYWBkBKSgrh4eElx1NSUujcuXO5r+vUqRMBAQHlPl8dnE4ncXFx9OjRA4fDUaP3asg679rAukOJOALD6N2747EnrF5Y65/Blr4Pq9eVdDnzopNex+l0ssH6F73jn8OxaxExq/6J6+qvILJPDX8Gcjr08+VZVF+eRfXlWWqivrKzsyvcCFatwS4qKoqwsDCWLVtGly6mfSYzM5N169YxceLEcl/ncDhq7Zu1Nu/VEEU3MQF9f1reiV/nc5+BuM+xj/oXVKAOLIcP1hVTYfqV2Pb8huPTS+G6uWYJFamT9PPlWVRfnkX15Vmqs74qc51KB7usrCwSEhJKPk5MTCQ+Pp7g4GAiIyO55ppreOutt2jdujVRUVG89tprhIeHM2rUqMreSjzQsbXssk98stslx5Y+qSjvAPjLDJgyDhJXmj1l//ojNOt46teKiIg0MJUOdhs2bOCaa64p+fjZZ81g+HHjxvHcc89x4403kpOTw2OPPUZ6ejp9+/bl/fffx9fXt/pKLXVWyxDTYldqkeKq8m0MV39hQt3+NTDnHtNyZ7NV3z1ERETqgUoHuwEDBrBly5Zyn7fZbNx9993cfffdVSqYeKbiFrsDqbk4XRYOezWFL79guHwKvNEP9vwG8XOg68nH6YmIiDQ02itWqlXzQF8cdhuFLovDGbmnfkFlhETD4LvM458egcIa3M0keRvMvRfS99fcPURERKqZgp1UKy+HnRZBZv26UluLVZchd0NgBKTugeVvVf/1AVwus1/tqg/NnrYiIiIeQsFOqt2xCRQ1EOx8G8PZRfsU//ISZB6u/nts+goOrDWPt/6oPWtFRMRjKNhJtYsKMcEusSZa7AB6XmHWs8vPgAVPVu+1C/Ph5+Oumb4PDm2o3nuIiIjUEAU7qXY12mIHYLfDec+Zx6unwIH11Xft1R/D0V3QKBzaDjPHtv5QfdcXERGpQQp2Uu1aFrXY1cgYu2KtBkD3CYAFP/yjerpL8zJg8fPm8VkPQrfx5vHWH6t+bRERkVqgYCfVrsZb7IqN+hd4+ZnlTzbPrfr1lr4BWUnQpB30uRY6nWuOJ66CzKSqX19ERKSGKdhJtWtVtK1YQko2adkFNXejkFYw+E7z+MubYf4TkH3k9K6VeRiW/sc8PvsxcHhDUCS06AlYsH1etRRZRESkJinYSbVr1SSAmOaB5DtdfL12X83ebMg9ED0QCrLgt1fg1R7w8+TKB7zFL5hrRPaBrpccO97pPPNe4+xERMQDKNhJtbPZbEw8IxqA6SsTsGpyuRDfxvDXH+DKadCiB+Rnwq8vw6s9YcHTZpbrqaTsgD8+Mo/PeaL0VmXFwW77gopdS0RExI0U7KRGjIuNwtfLzuaDGazZm1qzN7PZoPMYuPlXuOJTaN7DLIXyywvw+bUnD2QuF8x7DFyF0GHUsZmwxSJjzQzZ/AxIWFqzn4eIiEgVKdhJjQgO8GZMzwgApq9IqJ2b2mzQ5UK4+ReY8IGZWLHlO5h5Tdnbj+VnwcxJRRMvbGYyxp/Z7dBptHms2bEiIlLHKdhJjfnLGa0AmLN+P+m5NTiJ4s/sduhxKUycbsLd1u9PDHfp++HD80yoc/jAuHdMV25Zirtjt3yvXShERKROU7CTGtO3dSgdwxuTW+DimzU1PImiLO1HwsTPisLdDzBjkgl3+9fAeyPh4HoIaArXzoFeV5R/nXZnmfB3dBekbK/YvfMy4Ld/Q/K2avlUREREKkLBTmqMmURhWu0+XVHDkyjK034E/GUGePnDth/hfxfCh+dDxgEI6ww3LoBWA09+Dd9AaDPUPK7I7FjLgtl3wfx/wXf/V+VPQUREpKIU7KRGje/TEp+iSRTrEtPcU4h2Zx0Ld4kroTDHTJS44ScIbVOxa5R0x1Yg2MV9Dhu/NI/3LIWCGl6oWUREpIiCndSokAAfLuxRy5MoytJuOFz1OTSLMYsaT5wBfsEVf33HogkUCcsg52j556UmwLf3H/vYmWdeIyIiUgsU7KTGTRxgumNnr9tPRm1OoviztmfCHSth9FPg8Krca5u0NV23lhO2/1z2OS4nfHUL5KVD1BnQ80pzfMfCqpVbRESkghTspMb1ax1Kh/DG5BQ4+WbtfncX5/QV7x278SsT4v5s6euwZwn4NIbx75juXoCdi2q2XPtWw4sdYdVHNXsfERGp8xTspMYdP4limrsmUVSHmDHm/ea58N+BsO4zcBaaY/vXmp0uAM5/Hpq0M92/YGbfZiXXXLlWvgdZh+H392vuHiIi4hEU7KRWjI81kyg2HUh33ySKqmo1AM59xozNS94KX90Mb/Q1LWVf3gSuAugyFnpfZc5vHA7Nu5vHNdVq5yw8NlP30AbISqmZ+4iIiEdQsJNaEdro2CSKd3/Z4ebSVMGg2+GeDXD242YNvKO7Ye49kLwFGreAsa+X3mu23Vnm/c4aGme3dznkHDn28e5fa+Y+IiLiERTspNbcPLw9AN9vOMj2w5luLk0V+AXBmffBPXEw+mlo3Lxo94q3IKBJ6XPbjzDvdyyqmV0rNn9b+mMFOxGRBk3BTmpNTItAzunaHMuCdxZ7cKtdMZ9GMPgO04J332az08WftRpsQl96IqRU8+dsWUX73AK9Jpr3u36p3nuIiIhHUbCTWnXbWabV7qs1+9iXWk8W7vXygUZNy37OJwCiB5jH1d0de2iDWTfPyx9GPgrYzNi/jIPVex8REfEYCnZSq2JbhTK4fVMKXRbv/bLT3cWpHcXdsdU9gaK4G7b9SAhuCS16mI93/1a99xEREY+hYCe17vYRHQCYvjKB5Mw8N5emFhRPoNj1y7HlUapDcTds56JlWNoOK7rP4uq7h4iIeBQFO6l1g9s3pVd0CHmFLj78bZe7i1PzInqDX4jZkWL/6oq9xuWCDbPg0Mayn09NgINxYLMf28e2JNhpAoWISEOlYCe1zmazcXvRWLspy/aQluPGbcZqg91xbLHiinTHFuTA59fCF3+FD86Fo3tOPGfzd+Z9q8HHxve1GgQ2BxzdBal7q6XoIiLiWRTsxC1GdWlOp+aNycgrZOryMoJLfVPcHXuqfWMzk+DjsRA/23ycn2H2n/3zFmZ/7oYFswxLZKx5rGVPREQaJAU7cQu73catRa12H/62i5z8MvZerU/aFU2gSFwJeRlln5O8DT4YBYm/m67bS942+84mLIVlbxw7L/sI7FlqHne+oPQ12p5p3qs7VkSkQVKwE7cZ2zOSqFB/UrLy+ez3BHcXp2Y1aQuhbcBVeCyUHW/3Enh/lNnJIrQN/G0+9J4I5z1rnv/5STOmDmDrj2A5oXkPc+7xSsbZ/VIzCyKLiEidpmAnbuPlsHNL0W4Ur8zbSuLRbDeXqIb9uTs2dS+snQ5f3w5TLoHcVIjqD3/7GZp1NOfEToKYC8w+tF/eDAW5x3XD/qm1DiB6INi9zYLIRxvAxBQRESlFwU7c6sr+0cS2CiEjt5D7Zq7D6arHrUzF3bHrP4NXe8Kr3eHrW2DtVHDmQ5eL4No50KjZsdfYbGb/2YBmcHgj/PQI7Fhgnjt+fF0xnwATDkHdsSIiDZCCnbiVl8POq1f0ppGPg5W7jvB2fdhqrDxth5lZqzlHIXWPedyyHwy5B67+Ei77GLz9T3xd4zC46D/m8e/vQUE2BEdDi57l3Kd4nJ22FxMRaWi83F0AkdZNG/HExd154PN1/HveVoZ2aEb3yEB3F6v6BTSBSz+AgxvM0iStBoBvBT/PzhdAn2tg9SdFH48xrXllaXMmLH7ezIy1rPLPExGRekctdlInTOjTkjE9Iih0WdwzYy1ZedW4Q0Nd0m0cnP0odBxV8VBX7NxnILRt0XXGl39eVH/w8oPMQ2ambV2SlWImiSx+0d0lERGplxTspE6w2Ww8Pa47EcF+7ErO4unvNru7SHWPb6CZLXvDfNPaVx5vP4g+wzw+fnux/Cyzv+yvL5uA5Q7rZ5jlXH55EXLT3FMGEZF6TF2xUmeEBPjw8uW9uOr9FcxYlUi4PRjv8HRSsgtIysgjOTOP3Hwn1wxuQ7PGvu4urns0alZ6ckV52g4zY+y2fA92L/N+12IozDXPr5kKf/kcmnWo2fL+2eZvzXtnnnnc+y+1e38RkXpOwU7qlMHtm3HTsHa8s3gn/1mZxn9Wnrjm246kLN68qo8bSudB2hStZ7fjZ/NWLKSV2cXiyE6zGPKV06D14NopU1ayWWy5WNznCnYiItVMXbFS59x/TgwD2oZit0F4oC/dIoM4KyaMcbEtsdng27gDxB9Id3cx67aWfY6Nx2vZD0Y+Crcug7vXw02LoGVfMzv3k4th/czaKdPWH8ByQWCk+XjnYsg8XDv39gQ7F8H2n8FZz/dOFpEapRY7qXN8vOxM+9sAVq9ZQ5/YWBwOR8lzBU4Xc9cf4N/ztvLuNf3cWMo6zuENty41Xa8BTUo/1zgcrp0LX91s9qT98kaz48Ww/zv1DNrdv8G8x2DgbdDj0sqVqbgbtu91sO1H2PcHbPwaBtxUuevUN5YFP0+G314xH/uHQpexZqJNm2Hg0K9pkTop/QDsXwMx59ep1QfUYid1lr2MH5R7RnXEboOfNh0iLlGD70/KJ+DEUHf8c5d9DIPvNB8vfBq+ucN005bn0CaYPtEEsq9vO7bFWUXkZ5VeWLl7USiM+7zi16iPCvPhy5tKh7qco2ZZmynj4KWOMOeeuje7uaoyDsH2+e4uhUjVfH0rfDax7G0i3UjBTjxKh/BALu7dEoB/z9/q5tJ4OLsdRj8FF/7bLJa8dirM+lvZXYHpB+DTyyAvHRw+ZvLDF381ga0itv9sWg9DWkPzbtB9PGCDxJWmtbAhykmFqeMhbqaZ4HLxm/DAdrhmNvS93uw2knME/vgI3jzD1E1SPfiedznNEICpE0x3vIgnyss0a4UCBEW6tyx/omAnHueuszvisNtYsPkwqxOOurs4nq/fX+Gy/5k9Zjd+CTOvMXvSFsvLgGmXm/1nm3Y0Y/UCIyB5K3z/YMXuUdwN22Ws6bIIbHFsh4wNs6r10ynhLIQV75qukromLRE+PM/8YfBpDH+ZCbFXm27XdsNh7Ktw/xaY9DV0Ot+MTYz73AS8L/4Khz14OaC4LyAp3jzerW3vxEPtWQKuQvPPapO27i5NKQp24nHaNmvE+NiiVrt59aAFoy7oehFMnG4WNt7yHUy/EvKzTTj6/Do4uN60IF1VtETK+HcBG6yZcupg5iyArd+bx8fvb9vjMvM+7ouyX5eWaIJj3Bemy7KyVr4D3/+faRmq6XX7ctNh0+yKBa6di80izUnx0LgFXP89dDj7xPMcXtB+BPzlM7hpMcSMASzz9f7vQFj4bLV/GjXOWQCLjit34ir3laUqMg/Du2fBj/+snfsd3IBXXuqpz8tKNmU6sK7Gi1QplnXyYR6eaOci8779CLcWoywKduKR7jq7I152G79uS2blriPuLk790PEcE9y8G8HOhSYQzbnbjIXy8jetSsX/mbYdBmfebx7PuQeO7in/unuWmMWIA5pB9HELK3cZa7p1D2+CQxtLvyb7CHxyCax4G2bdAP/uBguehrR9FftcclLNIsgA2SnwUw39AU7aCt8+AK90gZmTTOCadaNZTubPUnbA9L/AJxdBxgEI62IWnI4oZ8/f40X2honT4OZfofOFgAWLn4N1n1X3Z1Sz1k6Do7vAUbQO5b7V4HK5t0ynY/ELpiV42Rvmc6hJCSuwvzec9r8/cupzf/u3KdOH58G2eTVbrspY+DQ81Rz2/u7uklSfHQvN+3ZnubUYZVGwE48U3SSAy/pFA/DKvC0lxzNyC5j5+16ueGcZQ59fwIqdbtphwVO1HQaTvgLfILPm3NqpgM3scRvVt/S5Z/3DBLW8dOxf/c10S5SluBs25nywH5vhjH8odDjHPD6+1a4g10zSSNkGjZubVq2sw/DLC/BqD5hxtZnAcTK//dtMQgiMNOVfN/3Y5I2qcrnMgs9TxsGb/eH39yA/E4JaApYZM/dGfxN40/ebkPnjP+HNAbDlWzOe8Yyb4IYfISS6cveO6AlXfmpmMAPMvuvUX4u6ojDPBCKAkY+Y1uG8NDiyw73lqqyju+GP/x37eMFTJz//YJxpod00+/Tut+oDbFg0Prrp5JNoLOvYPQqyYdoVJki7W04qLHsTXAWw6gN3l6Z6pB8oGk5gg7bD3V2aEyjYice6Y2QHfBx2lu88wjuLd3DX9DX0e2o+f5+1nhW7jpB4NIdrP1rJ4q1J7i6qZ2k1AK6dA/5FM2rPf6F0F2oxhxdMeB98g7Ht+4OWmz888RzLOhbsOl944vPFS6Zs+KKou8Zlll/Zuxx8g80Ys3s3wKUfQeuhYDkhfo5pkUgsJ9Ck7oXlb5nHF75iQhTA3HtN93JV/fCQ6aresQCwQcwFReXcaLpMO4wyIfePj+D1WHi9t2lFcRWYIHvbMrjgRfALPv0ynPWwGXvnzIPProKMg1X/vMqSfcS0CqYfqPq1/vjYjNMMjDR1EtHbHK/t7tjD8fDDw/DGGacXfBY+a+oyoreZ9LLjZ9i9pOxzC/PMpJfE32H2HaartDJyUmHTNyUf2uK/Kf/c/ashLcG0uHe/1PysfH2r+SfHsip33+q0broJmgCbvzNfE09XvFVjZO/yVx5wIwU78VgtQ/y58gzT4vHs95uZvW4/eYUu2oc14u/nxTAiJozcAhc3fryKHzfW0B+++iqyN9y2HP7288nXmQtpBRe9DkCLHZ9hW/Bk6T8i+9dA+j7zx6asLotO55nJA6kJ5o/fT/80a+s5fEzLVPOuZk2+7uPh+m/NxI12I8CZb1ruMg6deM2Fz5jA03qIuf7Zj0JQlGlpWVTFcWlHd8Pv75vHA2+Hu9easYntR5hJIZG94epZcN130GqQmQmccxSaxcBVs+DqLyAspmplADOjefy75roZB2DGpOr9g3lkF3z3f6YL/Kub4Yvrq3a9/Gz49SXzeNgDZj/jqKJ1KPfVQrDLTTetbO+dbbrLl78JyVvgu79DZiX+8Tscb/Y7BjObPHaSefzn7/tiv74MSUXjLnPTYP7jlSv3hllQmItlMy3dtk1fl39ucQDsNBrGvweD7zIfz/+X+WfEHV3elnXs5wVMC21xF6Ynq8PdsFADwe4///kPMTExpd7OO++86r6NCAC3j+hAWKAvoQHeXDuoNd/cPoT59w3ntrM68M6kflzQowX5The3fbqab9ZWcHyWGIHNj/3xPZlul+A6y4xhsy/5twkCxZMdilvrOo4yf8z/zCfgWGvgVzfD8v+ax5e8dWzW7PGad4XLP4FmnSBjv5nBe/zEioMbTAsBwDlPmrDlGwhjXjbHlr1ZtYHlv71qWkLaj4TznoHQNmWf12aImRQx6SvzR/bWpeZrUJ38gkyo9As2y8bMva/qLTOJf8DMa+E/fWDlu8daWhKWma/t6fr9fcg8ZP4RKA5DLYu69muixc6yzDjHVR+a0PtyjBkvum+VaWXrfCGEd4X8jMqF/QVPARZ0ucjs7jL872a8YMIys6TP8Q5uMMEOjq0XuWYq7F1Z8futmWI+naH34rJ5YTu8CZK2nHieZR0Ldl0vLlrK6Ek49xlzbMXb5uertlvudi6ClO3gEwi9rzbHNn5Vu2WobpZ1bOJEu7o3cQJqaOeJjh078tFHH5V8fPzOASLVqXmQH0sfGondZsNhL72gsY+XndevjMXfO45ZqxO5Z8ZasvOdTDyj1Smvm1vg5JetSRzOyCMtp4CjWfkczS4gLScfp8vC22HH28uOj8OOt8NGdGgAN5zZlgCfhrlLgHXm/exOLaD1+lewrZ9hugavmAKb55oTyuqGLdbjMtMKUjzh4JzJJ9/Vwi8IrpwO740wXbY/PGS6XKGoRcQyuzYcPyYw5jxzbONXMPtO+NuCyu/okL4f1n5qHhePcTsZm80EwJrUtL3ppv70UjMeMryzaUm0n8b/7D/+03QZF+swygSSVR+a0PDHR8cCcmXkZZjuQIDhD4GXj3lc/E/DoQ1QkAPe/mW/PjfNdK/7BYN/iGnhLV683LLM85mHTMtl+n5IWG4m/6QmlL5Os04mVPa60uy+svs3+N8Y05I34OZTt6QmrjLfzza7GSMIZv2yM240X7cFk83sZpvNzCaffYfpku98ofknI+eoCXbf3me67O2n+Lt4cINp8bZ7YfW/icwtvxJ8eIXZreWsPy0zdHC9aU328oeOo48dH3S7Gaf61S1m7GebodD32pPftzoVt9b1ngjdJ5jv0S1F3bFevrVXjuqUtBkyD5qv9fGTweqQGvkr5HA4CAsLq4lLi5zA21H+HzEvh50XL+1JgI+DKcv38I8v40jKyOP2ER1OCILF9qXmcNMnq9i4v3L70S7ZkcwH1/ankW/DDHcp0ecR3bU/ji+uN2NQ3h1hBsbbvUr/sfmzdmeZGbPZyWbsVXEX0sk062DG9027wgzIjuhp1pPaPt+sx3f2Yye+5rznzbi4A+tgyavmD01BtukmLMgyr2s1sPw/uEv/Y7qAWw+B1oMr8iWpHR3ONsHhp3/CT4/A0jeg8wWmJbTNsGNB6mT2LD0W6npNNIGuebeiJ20m2K2bAaOeAN/GlSvf8rfNQstNO0DPK44dD46GRuFmYsyB9WZs5585C+DtoaVDmt3LhDzvRpCVBIU5Zd/X7g3RZ5jvr/Znmxa243ezaTPULCGz5Vv46VG46hR7Jv/8hHnfa2LpEDj0XhMOD6wzwwi6Xmy6evevMeNEx7xs7jvqCTM+9GCcCctn3Hjy+xW11hFzPjRqxpHIs0yw2/T1icFu49fmfcdzwKdR6ed6XGpC70+PwI8Pm69HaOuT37s6pCWaEAfQ7wYTrAMjTUv7jgXm8/JExd2wrQeV3QtRB9TIX6A9e/YwdOhQfH196d27N/fffz+RkeWvzOx0OnE6a3aNm+Lr1/R9pHpUd309fmFn/L3tvPvrLl6Zt5WlO5J5+dKetAgu/YO5avdRbp22hiNZ+YQGeNO3dSihAd6EBPgQGuBNsL83Xg4bBYUWBU4X+U4XOflO3v9tF8t3HuG6j1by/jV9adzAwl1JfbU5C66Zg/2zK7EVzXa02gzF5RMI5dalHS6fgu3QRqw+11Z8LFD7UdjOehj7oqexvn0AgqOwAa5+12MFtz7xfgHNsI2ajH3u3WZM1IInT7ik1fFcXJdPPTHcZSVhX/URNsA55N6TfC5ucsYt2LKPYFv5DrbMgyY4rPoQyzcQq+N5WCMfheCoktNL/Xw587HPudt87WKvwbrw1eKTzPtWQ7A36YDtyHZc62dg9bmu/HIcWI8teYtZ0uTobmxHd8H+tebawx7Ewlbqa2dv2Rfb1u9x7V2J1bKMbv8dC3GkJpgxZnYHNme+aQXLTgGOzXi3/IJLZlBbzbtitR1h/vD6HBdCy/q+Ovtx7Nt+xLbtR5zbF5Q/w3HnIhy7fsGye+M68++l698vFNsZN2P/7WWsBU/hatoJ+8JnzOc8+kmsgDBzvl8othGPYv/+AayfJ+PqPBYaldMAUpiHff0M8/3W62qcTidpLYZg2b2xHd6E8+BGCOtc9Mlb2Dd9be7XeSxWWd+b/W/GHj8H294VWN/cjuvqr0zLYw2y/f4hdsuF1XoorqYdwbKwdRmLfeU7uDZ8idXhJP/sVcXRPdgSlmL1uPzUraJlcRaY7uOwzmXu/2rfudB8rdsOL/trTc3kjcpcy2ZZ1dvpvnjxYrKzs2nbti1JSUm8+eabHDp0iDlz5tC4cen/9LKzs4mPj6/O24uUy7IsFu7J4YPVGeQ6LQJ9bNzeP5j+kSbczduZzfur0ym0oG2IFw8OCSUsoGK/GLam5PPkL0fJLrSIaerNI2eGEuDdcOcm+WQfpMOKh/DPTGB3r/8jpVUN/XduWbRb9S9CD5odDJxejdgwcgqFviEnOf9xQg4uweXwxeXwx+Xlh8vhh29WInZXAYfajiex+x2lXhYZ/z4R26eRFRLD5qH/rVMbfh/P5swnMGUtIQd+I+TQErzzzM4suY2i2Dz0DZw+QSe8psW2T2m5+QMKfELYOOJ/ZZ4TvuNzoje9RXZQB+KHvVPm598y/l1abC97Xb2s4Bg2n/nmCWGixdaptNzyIUciR7Cr76MnvK712hdotvcHDre+iL097sbuzMVRkImjIAOHM5cCnxAK/JpiOU6/Wy96w38I3/UV2UHtiR/2tlmO5niWReffbqNR6hYOtx3H3u53nnANR0Em3X++Cq+CDAp8QvHOP0p6s75sG/hC6a+V5aTzr7fRKG0bydHnsqd32Tu3hO5fRLs/JpPv14y4UdNLytR+5cOEHFrO/k7XciDGdKn6p++g6+Ibcdm9WXfuV7i8Asq8pm/WProsvhGHM5eE7neS1HbcaXy1KsbmKqDH/CvxzjvKjr6PkxppAnOjIxvovOQunF6NWDd6FpajAq3JldA4eS3tVz2GV0EmCT3uJqnNxRV+rVfuEZolfEvYntn45KZwsN1l7Ot26wmfV68fLsbhzGXTsPfICW5freWviC5duhAQUHYdF6v2YPdn6enpjBgxgoceeojLLrus1HPFwa5Tp06nLGhVOZ1O4uLi6NGjh8b8eYCarK9dyVnc/dk6Nh4wXa2TBrYCC6asMN09F3RvwfMTuld6vNz6xDSu/eh30nML6R0dzEfX9iPI37tay15XlVlf+ZmmO6r1kJptHcjLwP7RudiSNuMa8SjW0HtP/RrLOjGcbPoax6y/AuA67wWs/n8zx3NSsb/eE1t+Js7LP/WcLiTLBYkrsX95I7b0fVitBuO6ahZ4+R6rr6jGeL83DFthLq6L38bqeXnZ18o+gv3VbticeTj/+hP8uXVtzxIcn4w1t201CCu0LTRpB6FtzOPwrmWPqdq5CMen47FCWuO6809bvznzsb8Sgy03Deek2abrtCZkp2B/oy+2vHRcF72B1esvx54rzMO24m3sC57A8m6E644/zPi8MtiWvIp9wWQAc+4tS8xkkT/btwr7h+diw8J53XcQPfCEU+yfTsC2cyGuofdjjfhnSX31Ih6vObdjNYvBdesyc99Fz2D/9SWsThfgumLqST9V2+/vY//h71he/rhu+sWM0awBtg2zsH91I1ZgBK4715qZ7QCWC/trPbBlHKjcz9Kmr7Gv/hir84WmVd9+4u9m2/qZ2Obcic1l9rq2mrTHdduKk//usSxIXInt9/exxc8ueW2xE77v9izF8cmFWAHNcN23udxr18Tfr+zsbLZu3VqhYFfj/UVBQUG0adOGhISEcs9xOBy1FrZq815SdTVRXx2aB/Hl7YN58YctvP/bLqYsP/a9+cDoTtw+ogO202iRiW3dhGk3DuSq91ewdm8a1/5vFdcPacORrOLJF+atXbPG3DGyA37e9e/7sFR9+QdD+7Nq/qYBIWZ5kT2/Ye984el1vwD0mACpu+Hnydh/fMj80es4Cla9b0JqeDccnS84vYkJbuEws3Ov+hw+OBdbwlIc394L4942T1sW3j89hK0wF9oOw977yvJbIgPDzJIz66bjWP1x6fFweZlmogBA7CRsF79BhX96ovsBNmype3DkHoVGzY49t+MXMzGicXMcbYeefr2eSmC4mQwz71HsC582n6cz33Rnr3jHTMwAbINuxxEcUf51Bt5iZp9mHcY26nEcTcvZP7TVAOhzDaz+GMecu83M5mYdjz2fmlAy69Le52o47vefrfMY+O5ebMlbcKRshfAuZtweYOt2yal/V55xI2yZi23XLzjm3GFmblfk65p9xKzBF9bp1OeCmWgD2Ppeh8Pn+OEuDjOJafl/cWyeDV1PMqkKzFI0391fMuPXtmuxWRB89FNm3K7NZsLZLy+a3S3AzFjeuRjbkR04di40y7+UxbLg82tLrRNI9ADofyPsWgRrppqv0a1Lzcx6gN2/mHK0OwuH16n/aa/Ov1+VuU6N/4bKyspi7969mkwhdYqvl4NHLuzK/67vT7PGPjT29eLdSX25Y2TH0wp1xbq3DGbajQMIDfBmfWIa985Yx5NzN/HGwu18uiKB7+IO8sbC7Vz69lL2pZYz6PtPLMsiNTufuMQ0vos7wPxNh6jhhnbP06hp0TIPVfwlOvQ+6H2Vae36/DqzNMWKosWOh93vQaHuOM27weX/M9156z8r2f0hdP8ibDsWmDUDx7xy6u7lfqY1kw2zzAzPYvMeg9Q9ZjJE8fIaFeUXbAbVw4nLnhQvi9H1kpoLdcUG3Gwm32QcgCnj4ZVu8PNkE+qCWsLop2F42d2mJXwameVtxr1jwsHJnP24mTiSsg3eGmKW0XEW7dyydhpgQZszTavn8fyCzEQQMBMmDseb9fgcPmbm96nY7XDxm2b5kb0rzPI/p5KfDe+fbXZZmXH1ybcPBLM9YMJS06rWp4wZuF0vMe83f2d2mSmLVbQn8ptnmOBl9zLLpQQ0heStMO1y+ORis53bN3ccC3WD74LLPoY+RUvqFC+fVJbN3xZd2xtirzYzlW/4CXpeBuc9Z1pbUxNK7we8s26vX1es2lvsnn/+eUaMGEFkZCSHDx/mP//5D3a7nQsvPEUyF3GDs2LC+e3BkRQ4XQT6VU+3abfIYKbfNJCXftxCboGL0EY+NCmagOHv4+DdX3ayYV86Y//zG2/+pQ+D2jct9XrLsli15yjTVyYQfyCDxCPZZOSV3q7rqUu6c/XAWpjZ1tDYbHDhq+aP157f4KPzzWD9ph2O/UHyRB1GmdmZc++BRc9g8w8lemPRH/Wh95VuMSpPVH9o3t0sT7J2Ogy6zcwQLN4m6uI3TPCorKh+JpzsW3UsnBTkHlsDsVvNjQUr4eULo/5lFmLeu9wca97dBIXu4491JZ5Ki+7m7VQaNYUbF8Ccu8wM0fmPm5Bx8RuwpmhJneL1/v6s2zjY+n3p9eDaj6z4TiYhrcwajLPvNOvydTzHtPyV59eXji1FFD/H7EE75G4Yco9Zh/LPipc46XwhBJXRwhnV34Tl9H1m144/72qTedgsCVPUEknzHnDJmxDRy+zE8evLpmV012Kz5BGYLtELXoTi4RNn3GhC3c6FcHizWQboeM5Cs3AzwJC7TpxF7xsIF/8XPr4QVn9s9rWO6n9s+772dXP9umLVHuwOHjzIfffdR2pqKk2aNKFv377MnDmTJk3q3rYbIgB+3o5q7xbt3CKI96/tX+ZzF/aM4OYpf7BxfzpXf7CCf17QheuHtCGv0MXsdfv5eOnuMpdaadbYlyaNvNl6KJOnvt3EoPZNaR9WyaUn5NS8fMwafO+POraP6dD7ar7VqKb1u978gV76Ovbv/w87ZhySrSJjEsGE3n7Xw7f3m27K2KtMawmYP6in24rRsq9ZH/D4FrsdP0Neulkeo7bWCus2DvYsMdun9b/BhKWanCQTEg1Xf2k+9x8eNluCvT3UtBb7BkPXi8p+Xcz5ZlHk5C2mWxJMa3VlxE4qCmk/wefXw00Ly15HMGkLLDE7y3DOk+b83b/C4udNAD37UROKD24wLXWHNkDaXnN+ccj6M7vd/JO0/E3T6lgc7FxO83214EnTBW/3gmF/N8vJFC/Z4x9iFl7uf4MJZhu/MsveXPa/0l2uoW3MVn+b55oQOPbV0mVY84lpLQ1oakJqWdqeCQNuNS3239xh1i60XNC0Y6kZ5nVRtQe7f//739V9SZF6JSo0gFm3DuYfX8bx1Zp9TJ67ifnxh9h8MIMjWWYXBV8vO+NiW3JO1+a0ahJAVGgA/j4OXC6LSR+uYMn2FO6dsZZZtw4udx0/l8siI68Q36KFlO3lrNtXUU6XxS/bkliyLZle0SGc173FSdcQdLfs/EKmrUggtlUofVuHVu7FAU3M2LSPLjDjvsqbVOBpRj1hFrKNN5vFuy54CUdl1uLqeQXMe9z8UfzkErP3a2gbc93TVbK12GqzJIndfqw1qtsltdf9bbOd3gLMVb1n7NUmRM69F7b+YI73uLT8BZv9gkwL7JZvzbIvdq/KT+ix2UyX7FtDzGb2P/zjxPBjWSbEuwrM1nyD7zRv8bPhx0fMvrRf3Vz29Tuee/LJLt0uMcFuy3dmcepDG00rXfGuMBG9Tetlix5lvz60jQlzwx8y6yqWFbQG3mqC3brPTItc8Z6u+Vmw6DnzeNjfT97SefZjsH2eWf7k2/vNsTreDQu1MHlCRE7k5+3glct70aNlME9/F8/SHWZNrpYh/kwa1Jor+kUT2ujEpQDsdhsvXdaL8179lfWJabz+8zbuH33iivkb9qVxx7TV7E45tum9j8OOj5fZKcNlmeDnsiycloXLgrZNGzGkQzOGdmzKGW2blqzFt/dINjNX7eWLPxI5kHZsTEzzIF8mDWzNxDNaEeJ/7FdJem4BS7en8Ou2JBKOZPPgeZ3p3rIKG96fho3707hz+hp2JmXhsNt47MKuXDOodeXGTzZtD3evM384K7tLRV1lt8O4d3D5BbM/14+I8tZtK49voNkp5I+PTAsTNrP9W2UXLT5eeDezin9emvkDGhINW743z3Ubf/rX9SRBkTDxMzOubMdCOOuhk5/f7RIT7MAEDf9K/uMCZnbv+HdhyjhTn+2Gl+72jvvctM55+cP5zx9rvex6sZm4sOR1s5NEozAzjrN5D9MNHd7VtKydTMt+Zv/m9ESYeqkZ9gAmZI181IznrEgL+Z+7WI/Xeogp06E4051a3DK97E0zdjK0zbFxo+XxCYBL3oYPR5v9p6HOd8OCgp2I29hsNv46tC3dIoP4/I9ERnUJZ1SX5nidohUsItifZ8b14PZpq3lz4XbOigmjb+tjQx2+WbuPB2etJ7eg9IKs+UULKpdny6EMthzK4MMlu/Cy24htFYK3w14SOgFCArwZERPOr9uSOZSex0s/beX1Bdu5qGcEjtxMnlm5nLV703C6jk3uWJOwnHcn9WVwh2Zl3bZaWZbF/5bu5tnvNpPvdOHv7SCnwMnjszey+WAGT1zUDR+vSrQA1dGV5avEJwDrwtc4tHYtJ5njWb5+15fMemTgbVXfhcPhBZG9zX6r+1aZLZvyM81kjIrsVVxf2Gympe5k2+kV63Se6Y515lW+G/Z47UeYwPPbKzD7boiMNYEnJ/XYpIFhD5y4J7K3v9n94s87YFSU3W7C6bI3joW6Xn8x2wk2rqaJljababX75jZY+R4MusN8XkteM8+f/VjFdmWJ7m++Rr++bCYg1dSyO9VIwU7EzQa0a8qAdk1PfeJxxvSM4Of4lny5Zh/3zFjL93cPw8/Lzgs/buHdX8xA57Niwnj5sl74ejvIK3CSV+gir9BFgdOF3UbJ/rr2ov/E1yem8dv2ZJZsTybhSDa/7z428/HMjs24on8053Rtjq+Xg7xCJ9/FHeCjJbtZn5jGF6v3lSpfu7BGDOsYRvyBdFbsOsJ1H/3Oa1f25vweJ0aJrLxCPl62mwOpudx7TiealNFSWRFHsvL5+xfrmB9/GIBRXcJ54dJezFy1l+d/2Mz0lQnsSMrk7av7VugeSRl5PP3tJpo08uXhCzqfMnBX1ZaDGQT6eREZUk4X3Ek4XRa3ffoHu5Ozef7SnvSODqn+AhaL6GXGHqUnmjFW1aFl36Jg90fRrhKYP/x1dCFot/MLMsEkYVnVWzVHPGz2zU1cCV/cAH/9wUyqyDpsZixXZIu/09HnGvjjY7O92QUvmZ1Cqlv3CWbWdvo+M6Zwz1LzT0NkLHStxKSc4Q+aUNi0Q8UnqbhRjS9QfDLFCxRXZMG9qnI6naxdu5bevXtrHTsPoPo6tfTcAs5/9Vf2peZwUa9Ijmbn8+u2ZABuPas9D4yOKXc/3FNJSMnmt+3JZOYVcH73CKKblP3zaVkWqxNSmbZiDwcOpzCmX3uGdQovOT+3wMm9M9by/YaD2GxmNu9VA8xs3rxCJ58uT+DNhdtJKRpb2CLIjzf+Eku/NuVPtnK5LJIy8ziYlsuBtFwOpuVwID2Xr9fs41B6Hj5edv55QZdSXa8LNh/irulrycwrJCrUn/ev7UfnFuXP4Px99xFu/3Q1hzNM98ulfaN4YULPKo9TLM+nK/bwyNcbCPB28Pktg+kaWbnZpVOW7+HRrzcApst98sXduPKMExfHtSyLOesP8NKPm2nm4+LTW4fj71sHFtHe8KWZkdosxgy+L8iGGxea/V2l5n8fHt0D75xpJi10GQvxcwELrpltumhrirOg4jOOT9eCp+GXF0xIPbLTzHK/dg60HVZjt6yJ+qpMXlKwkzpJ9VUxK3cd4Yp3l1H8U+zv7eDFy3pyYc/y92auCSerL6fL4tFvNjCtaGeP+87pRItgP16bv61kLb82TQOw220lY+L+79wYbjqzXakgdSQrn0+X72HK8j0lgevP2oc14j8T+5QZjLYdyuBvn6xiT0o2Pl52Lu0bxQ1D25aaWWxZFh/8totnv9+M02XRqkkA+1JzcLosrhvchsfHdi1znN7u5Cze+WUHLhe0bhZA26aNaN20Ea2bBtDoFPsGv//rTp769tjWii2C/Pj69iEn7GNcnsMZuZz98mIycgvpEN6Y7YczAZh4Riv+dVFXfL1MfWw/nMlj32wo1bV+9YBWPDWunAHqtSk1AV49rhyhbeCutWqxK1Irvw83fQMzrzn2cY/LYcJ7NXOv2pRxEP7d3UwCATM+8KrPa/SW7g526ooV8WBntG3CbWe1582FO4gK9efdSf0q3dpT0xx2G09f0p1mjXx4fcF2Xpm3teS55kG+3H12Jy7rF0V+oYt/fhXH12v389z3m1m56wgvX9aLlKx8Plyyi1l/JJJXaMYI2m0QHuhHi2A/IoL9aB7kR9tmjbisX1S5W8F1bB7I17cN4a7P1vDrtmSmrUhg+soERnVpzk3D2tG5RSAPzlrPd3EHAbioVyTPju/BjxsPct/Mdfxv6W6C/b2595xjq++7XBZTlu/hue83k1NQ9ibd7cMacetZHbikd+QJ3blvLNjGSz+Zr8dfh7Tll21JbD+cyfX/+53PbxlUMoHlZJ6aG09GbiE9o4L58tbBvL14By/P28r0lQlsPpjOK5f35os/9vLuLzspcFr4eNm5uFcEn/+xj6lFs4Yn9HXz8g3B0WR5N6FRwREADre6gHCFutrV9WLod4NZl9A32OzuUB8EtjBrEa6fYda7q8oMbg+hYCfi4R4YHcOwjmF0iQwiqJoWWa5uNpuN+0bH0KSRD0/M3USwvze3ndWeawa1KVlD0Nth599X9GZAu6Y8PnsjCzYfZviLC0nPPbY4c4+WwdwwtC0X9Iio3CSIIqGNfPjkr2fw++6jvPvLTubHH2LeJvPWyMdBVr4Tb4eNR8Ycm0U7vk8UGbmFPD57I6/9vI1APy/+dmY79h7J5sFZ60tawAa2a8LAdk3ZnZzF7pRs9qRkcTS7gB1JWTzw+Tr+u2g7d5/dkbE9I7HZ4MUft/DfRWadvPvP6cQdIzuQeLQN4/67hPgD6dz+6Wrev7bfSZeU+WVrErPX7cdug2fG9cDLYeeOkR3p1jKYu6evYU1CKiNeWlRy/oiYMP51UTeiQvwgJ5XPN2Xx8FdxxLQIrPWZy8ebtnIvYbltOcdhgt2Nq6IY22wnfx3S9oTu79wCJ1+u3seynSncPKzdKcu9dm8qG/alcXm/6NP6nqmrsvIKOZqdT1RoNfZ2nfsMNG5uxrsFNq++67rb0PvMNm29JkLzru4uTY1TV6zUSaovz1KZ+tqXmkOIv/dJuyg37U/n9mmr2ZWchc0G53Rpzt/ObEf/NqFV2vLtz7YfzuSD33Yxa3Ui+YUuIoP9ePOqPsS2OnH5iONb1yaeEc3stfvJynfi523nofM6c82gNieEkKNZ+cxYtZd3Fu/gaLbpCurUvDGdWwQxe91+AB4Z04W/nXls66h1e1O54t1l5Ba4mHhGNM+M61Hm55xb4OTcV39hT0o21w9pw+Nju5V6fk9KFjdP+YPNBzOIDPbjsbHdOLdbc2w2G06nk9Vr1vDGeieLtyYTFerPnDuGlrnETrG8Qie7krPYfjiTHYeziG7iz7jYllWuj5/jD3HjJ6u4xf41f/eeySHvKAZkPA/YGBETxkuX9aJpY18OZ+QyZdkepi7fU/K19PO289JlvcocevDnbvUzOzbjrav7VqgVFCAtp4B5mw7xXdwBNh9IZ1inMCae0YqeUcHV+j1YEX/++Vq+M4W7P1vDofQ8Lusbxd/P60xYoG+tlknK5+6uWAU7qZNUX56lJuorM6+Q7+MO0L9NE9o0a1Qt1yxPcmYev25L4qxO4eWGG8uyePb7zSWzjgH6tQ7lpct6nbJ8GbkF/G/Jbt77dWepFsjytob7aeNBbp76B5YFD57XmVvPan/COa/M28rrP2+jeZAv8+8bXuaWeDn5TlbsSuGMtk1KdVEX11ebTl0Z99ZyEo5kM6xTGB9d179kwk3i0WwWbkni161JbD2UQcKRbFx/+msx8Yxonr6kx0knlexLzcHf21HmTOS1e1OZ+O5ycgqc/LWnP48634D+f2NqajeenLuJ/EIX4YG+DG7flO/iDpYs1xMV6k9EsF/JzO27zu7IPWd3LClHdn4hD82KKwnPDrsNp8uiR8tgPryuf7khKD23gHkbTZj7ZVsSBc4T/zx2iwxi4hmtuLh3ZJW2ISz+01uRkFhcXz169uLtX3bx6vytpeoi0NeLe8/pxKRBrcts4c0vdHEoPZfDGXkkZ5q3pIw8bNiYOCCa8MB6uKyPGynYKdhJGVRfnqWh1JdlWUyeu4kvV+/jjhEd+OvQtpWaeZyWU8AHv+3ixw0HufWs9lwS27Lccz9asosn5mwCoFd0CGN7RjCmZwQRwf7sSMrk/Fd/Jd/p4q2r+pS5jMzJHF9fWw5lMf6tJeQWuPjLgFYE+nqxYPNhthVNwjheoJ8XHcIbExniz/dxB3BZMD62JS9c2vOE8YOFThf/WbCd/yzYht1mY0TncC7tG8XIzuF4O+zsTs5i/FtLOZKVz/BOYSd0O8cfSOeOaavZkZRVcqxv61D+NrQto7u1AOC57+N579ddAJzfvQUvX96LpIy8kpZKL7uNR8Z0IbZVKNf/73eOZOXTumkAn/z1DFo3PRbG96Xm8OFvu5i+MoHs/GNjJWOaB3JBjwi6twxizrr9fLfhIPlF4zwDfByc170FF/aMYGiHsFN28x5Oz2VdYhrr9qayLjGVuH1ppOUU4OflwM/bjn/R1oZB/t4Mat+UszuHE9sq1IRSp5OFy//gw02ukq7/CX2imNCnJc9+v5m4fWmAaQ1+ZExX/H0cbNyXxob96Wzcn862QxkU/jmVFwkJ8ObJi7sztlftTriqqyzLIq/QVaVtJhXsFOykDKovz9LQ6suyrFrpjnvpxy38d9H2Uq0zZ7RpQlZ+IRv3pzMiJowPr+tf6bL8ub6+WpPIvTPWlTrHYbfRt1Uow2PCiI0OoUN4Y8ICfUvuNXvdfu6dsRany2JMjwhevbJ3STDbeySbe2as5Y89R0+4d9NGPlzcuyU/bz7EnpRserQM5rObBpbZNZ+dX8jLP23laHY+kwa2LrOL/PNVe/nnVxvId7qIaR7IgbQc0nMLadbYl/9e1Ycz2pqlc3YlZ3HNhyvYeySHZo19+N/1Z+DlsPHu4p3MXre/JPi0C2vERb0iGdMjgo7NA0vd62hWPrNWJxatiXgscAb5eTG6WwvG9Iygd1QIu1Ky2HYog22HMtl6OJOtBzM4mJ5LZYUGeHNWTDjdIwP5z/ytpOaZRbefvKQ7lxZNeHG6LGb8vpcXf9xc0kVdFl8vO80a+xIW6Fv03od1e9PYdMDsSz2mZwRPXty9wutILt2ezDu/7OTcbi24on/0aS+tBObnae+RHJbvTGH5zhSwmclEtTXus8Dp4vfdR5i/6XDJ9+XwTmE8fEEXYloElvu63AIn6bkFJ7R4Ktgp2EkZVF+eRfVVc5Iy8vh+wwHmrjvAyt1HSo77eduZd+/wctcYPJmy6uuVn7Ywa/U+BrRtwojO4QzrGEZwwMm7Gn/YcJA7p6+mwGkxqktz3rwqlh82HOSRrzaQkVdIY18vnrqkO10jg/jij0S+XL2P5MxjS9VEN/Hny1uHVHl82KrdR7hl6h8kZ5r1EGNbhfDWVX1PWDLmcEYu1334O5sOpOPjsJfaiWVQu6bcPLwdwzuFnTIoW5bFH3uOMnf9Ab6NO0BSOcvvHM9ug47hgfSMCqZndAi9o0JoHuxLXoGLnAInuQVOcvKd7E/LYdGWJBZtSSItp3RQ69S8Mf+9qg8dwk8MG6nZ+bwybyuf/b6XJgE+dIsMolvLYLpFBtG9ZTCRwX4nfF4FThdvLNjOGwu343RZNGvswzPjepS0iJb3ub//6y6e/T6+5B+OnlHBPHlxd3pVcGFsl8tiZ3Imf+w5yoqdR1i+M4X9aScG39Fdm3PvOZ3oElH2TP/kzDwOpOaSllNAak4+aTkFpOUUkJVXiMsy291aWCXLQdkw2zJ6FS3M7rDb2H44k0VbDpcaIlHMboMr+kdz7zmdSsKbZVls2JfOjFUJfLN2P9n5Tr69a2ipdTEV7BTspAyqL8+i+qod+1NzisZ/JTOhT0su7l1+V+7JVGd9LdxymFum/EFeoYuWIf4laxP2aRXCa1fGlgqehU4Xv2xL4vNViRxMz+Xly3rRLqwK+8weZ19qDo9/s5H2YY24b3SnkvX7/iwjt4Cbp/zB0h0p2G1wfo8Ibh7Wjp5RIad1X6fLYtXuI3wbd4Dv4g6SnJlH8yBfOoYH0rF5Yzo1D6RjeGO6RASdck3D4xU6XaxOSOXnzYdYuesILX3zef6qITTyO3mLmstlVXoh7bjENO6bubak+31Ul+bcPLwd/VqXnqyUnV/Ig7PimFM0dnFYpzDW7DlKRl4hNhtc2T+a/zu3c6lWP6fL4nBGLjsOZ7E64SirE46yJiH1hNDqZbfROzqEge2akng0m2/W7S8JZGN6RHDrWe3JyitkbVFX9rq9aSXfa9WhaSMfRnQ22zq2bhrA6z9v4/sNZumjAB8HNw9rT7C/FzNWJRJf1MoJZjmj6TcOJDzo2D8RCnYKdlIG1ZdnUX15luqur6Xbk7nh41XkFDix2+DOkR25c2SHGt+G7XTlFTr5aeMhekYFlxprV1VOl0VugbNSAa5C162Fn6/cAif/nr+V937ZWdIS1ysqmBvObMcF3VuwLzWn1NjFx8Z2ZdLA1iRl5vHcd5v5co3ZVjAkwJvhncI4mJbLvtQcDqblljm+z8/bTs+WIZzR1iwT1Kd1SKkJPtsPZ/Dq/G18G3eA8lKKzQbhgb6E+PsQ7O9NcIA3wf7eNPb1wm6zYbOZVjebzYYNcFkWhS4Ll8vCaVk4XdCkkTcjO4fTOzr0hO7kVbuP8NS38azdm1rquI+XnfOKuqAHtWt6QpBWsFOwkzKovjyL6suz1ER9rUk4ytTlCUw8I/qkW8JJ5dXmz9f2wxlFSwDtK5ko0jLEn8y8QtJyCk4Yu1hs5a4jPPbNBjYfzDjhml52Gy1D/ekZFULfViH0aR1Kl4igk67RWGzzwXRem7+NHzYepEWQH72iQujdKoReUSH0iAqu8PI1p8uyLOauP8Dbi3fgsNuY0CeKi3tHEhJQfsupu4OdFigWEZEqi20VWubkBvEsHcIDeXZ8T+4fHcPU5XuYsmxPSZdn7+gQ3r76xLGLYHbBmXvnUGav28/B9Fxahvibt1B/wgP9TntyRecWQbx1dV8KnS63tADbbDbG9or0qFnDCnYiIiJSSrPGvtwzqhO3DG/P7HX7OZqVz3VD2pQ7dhHAy2FnfJ+a2Z6urnbr10UKdiIiIlImP28Hl/eLdncxpBIUgUVERETqCQU7ERERkXpCwU5ERESknlCwExEREaknFOxERERE6gkFOxEREZF6QsFOREREpJ5QsBMRERGpJxTsREREROoJBTsRERGRekLBTkRERKSeULATERERqScU7ERERETqCQU7ERERkXpCwU5ERESknlCwExEREaknvNx5c5fLBUBOTk6N38vpdAKQnZ2Nw+Go8ftJ1ai+PIvqy7OovjyL6suz1ER9Feek4tx0MjbLsqxquetpSElJYffu3e66vYiIiIjHaNOmDU2bNj3pOW4NdoWFhaSlpeHr64vdrl5hERERkT9zuVzk5eURHByMl9fJO1vdGuxEREREpPqomUxERESknlCwExEREaknFOxERERE6okGE+w+/fRTRo4cSY8ePbjssstYv369u4vU4L3zzjtMmDCB2NhYBg0axG233cbOnTtLnZOXl8cTTzzBgAEDiI2N5c477yQ5OdlNJZbjvfvuu8TExPD000+XHFN91S2HDh3igQceYMCAAfTs2ZOxY8cSFxdX8rxlWbz22msMHTqUnj17ct1112mlAjdxOp28+uqrjBw5kp49ezJq1CjefPNNjh8Gr/pyn99//51bbrmFoUOHEhMTw/z580s9X5G6SU1N5f7776dPnz7069ePhx9+mKysrGova4MIdt999x3PPvsst99+O1999RWdO3fmhhtuICUlxd1Fa9BWrlzJVVddxcyZM/noo48oLCzkhhtuIDs7u+ScZ555hoULF/Lqq68yZcoUDh8+zB133OHGUgvA+vXr+eyzz4iJiSl1XPVVd6SlpTFx4kS8vb157733+Pbbb3nwwQcJDg4uOee9995jypQp/Otf/2LmzJn4+/tzww03kJeX58aSN0zvvfce06dP57HHHuO7777jgQce4P3332fKlCmlzlF9uUd2djYxMTE8/vjjZT5fkbp54IEH2L59Ox999BFvv/02q1at4rHHHqv+wloNwKWXXmo98cQTJR87nU5r6NCh1jvvvOPGUsmfpaSkWJ06dbJWrlxpWZZlpaenW926dbO+//77knO2b99uderUyVqzZo2bSimZmZnW6NGjrSVLllhXX3219dRTT1mWpfqqa1588UVr4sSJ5T7vcrmsIUOGWO+//37JsfT0dKt79+7W3Llza6OIcpybbrrJ+sc//lHq2B133GHdf//9lmWpvuqSTp06WfPmzSv5uCJ1U/y7cP369SXnLF682IqJibEOHjxYreWr9y12+fn5bNy4kcGDB5ccs9vtDB48mDVr1rixZPJnGRkZACUtChs2bKCgoKBU3bVv357IyEjWrl3rjiIKMHnyZIYPH16qXkD1VdcsWLCA7t27c9dddzFo0CAuueQSZs6cWfJ8YmIiSUlJpeorMDCQXr166XejG8TGxrJ8+XJ27doFwObNm/njjz8YNmwYoPqqyypSN2vWrCEoKIgePXqUnDN48GDsdnu1Dw1z65ZiteHo0aM4nc4TVmpu2rTpCeO5xH1cLhfPPPMMffr0oVOnTgAkJyfj7e1NUFBQqXObNm1KUlKSO4rZ4H377bds2rSJL7744oTnVF91y969e5k+fTrXX389t9xyC3FxcTz11FN4e3szbty4kjop63ejxkXWvptuuonMzEzOP/98HA4HTqeTe++9l4suughA9VWHVaRukpOTadKkSannvby8CA4Orvbfj/U+2IlneOKJJ9i2bRvTpk1zd1GkHAcOHODpp5/mww8/xNfX193FkVOwLIvu3btz3333AdC1a1e2bdvGZ599xrhx49xcOvmz77//njlz5vDyyy/ToUMH4uPjefbZZwkPD1d9SaXU+67Y0NBQHA7HCRMlUlJSaNasmZtKJcebPHkyixYt4uOPP6ZFixYlx5s1a0ZBQQHp6emlzk9JSSEsLKy2i9ngbdy4kZSUFMaPH0/Xrl3p2rUrK1euZMqUKXTt2lX1VceEhYXRvn37UsfatWvH/v37S54H9LuxjnjhhRe46aabGDNmDDExMVxyySVce+21vPPOO4Dqqy6rSN00a9aMI0eOlHq+eFvV6v79WO+DnY+PD926dWPZsmUlx1wuF8uWLSM2NtaNJRPLspg8eTLz5s3j448/Jjo6utTz3bt3x9vbu1Td7dy5k/3799O7d+9aLq0MHDiQOXPm8PXXX5e8de/enbFjx5Y8Vn3VHX369CkZr1Vs9+7dtGzZEoCoqCjCwsJK1VdmZibr1q3T70Y3yM3NxWazlTrmcDhKljtRfdVdFamb2NhY0tPT2bBhQ8k5y5cvx+Vy0bNnz2otT4Poir3++ut58MEH6d69Oz179uTjjz8mJyeH8ePHu7toDdoTTzzB3Llz+e9//0ujRo1KxhkEBgbi5+dHYGAgEyZM4LnnniM4OJjGjRvz1FNPERsbq6DgBo0bNy4Z/1gsICCAkJCQkuOqr7rj2muvZeLEibz99tucf/75rF+/npkzZzJ58mQAbDYb11xzDW+99RatW7cmKiqK1157jfDwcEaNGuXm0jc8I0aM4O233yYyMrKkK/ajjz5iwoQJgOrL3bKyskhISCj5ODExkfj4eIKDg4mMjDxl3bRv354zzzyTRx99lCeeeIKCggKefPJJxowZQ/Pmzau1rDbLOm71w3ps6tSpfPDBByQlJdGlSxceeeQRevXq5e5iNWh/XgOt2LPPPlsSuvPy8njuuef49ttvyc/PZ+jQoTz++OPq2qsjJk2aROfOnfnnP/8JqL7qmoULF/LKK6+we/duoqKiuP7667n88stLnrcsi9dff52ZM2eSnp5O3759efzxx2nbtq0bS90wZWZm8tprrzF//nxSUlIIDw9nzJgx3H777fj4+ACqL3dasWIF11xzzQnHx40bx3PPPVehuklNTeXJJ59kwYIF2O12Ro8ezSOPPEKjRo2qtawNJtiJiIiI1Hf1foydiIiISEOhYCciIiJSTyjYiYiIiNQTCnYiIiIi9YSCnYiIiEg9oWAnIiIiUk8o2ImIiIjUEwp2IiIiIvWEgp2IiIhIPaFgJyIiIlJPKNiJiIiI1BMKdiIiIiL1xP8DX0R0GCdConYAAAAASUVORK5CYII="},"metadata":{}}]},{"cell_type":"markdown","source":"# 4) Evaluate Batch Normalization\n\nDid adding batch normalization help?","metadata":{}},{"cell_type":"code","source":"# View the solution (Run this cell to receive credit!)\nq_4.check()","metadata":{"lines_to_next_cell":0,"execution":{"iopub.status.busy":"2024-05-20T20:46:25.050183Z","iopub.execute_input":"2024-05-20T20:46:25.050568Z","iopub.status.idle":"2024-05-20T20:46:25.058749Z","shell.execute_reply.started":"2024-05-20T20:46:25.050540Z","shell.execute_reply":"2024-05-20T20:46:25.057916Z"},"trusted":true},"execution_count":20,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 4, \"questionId\": \"4_Q4\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct: \n\n\nYou can see that adding batch normalization was a big improvement on the first attempt! By adaptively scaling the data as it passes through the network, batch normalization can let you train models on difficult datasets.","text/markdown":"<span style=\"color:#33cc33\">Correct:</span> \n\n\nYou can see that adding batch normalization was a big improvement on the first attempt! By adaptively scaling the data as it passes through the network, batch normalization can let you train models on difficult datasets.\n"},"metadata":{}}]},{"cell_type":"markdown","source":"# Keep Going #\n\n[**Create neural networks**](https://www.kaggle.com/ryanholbrook/binary-classification) for binary classification.","metadata":{}},{"cell_type":"markdown","source":"---\n\n\n\n\n*Have questions or comments? Visit the [course discussion forum](https://www.kaggle.com/learn/intro-to-deep-learning/discussion) to chat with other learners.*","metadata":{}}]}