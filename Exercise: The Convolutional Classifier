{"metadata":{"jupytext":{"formats":"ipynb,md","split_at_heading":true},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":1338830,"sourceType":"datasetVersion","datasetId":708136},{"sourceId":1363948,"sourceType":"datasetVersion","datasetId":701538},{"sourceId":1495782,"sourceType":"datasetVersion","datasetId":878523}],"dockerImageVersionId":30648,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"**This notebook is an exercise in the [Computer Vision](https://www.kaggle.com/learn/computer-vision) course.  You can reference the tutorial at [this link](https://www.kaggle.com/ryanholbrook/the-convolutional-classifier).**\n\n---\n","metadata":{}},{"cell_type":"markdown","source":"<blockquote style=\"margin-right:auto; margin-left:auto; background-color: #ebf9ff; padding: 1em; margin:24px;\">\n    <strong>Accelerate Training with a Kaggle GPU!</strong><br>\nDid you know Kaggle offers free time with a GPU accelerator? You can speed up training neural networks in this course by switching to <strong>GPU</strong> in the <em>Accelerator</em> option on the right. (It may already be turned on.) Two things to be aware of:\n<ul>\n<li>Changing the <em>Accelerator</em> option will cause the notebook session to restart. You'll need to rerun any setup code.\n<li>You can have only one GPU session at a time, so be sure to shut the notebook down after you've finished the exercise.\n</ul>\n</blockquote>","metadata":{}},{"cell_type":"markdown","source":"# Introduction #\n\nIn the tutorial, we saw how to build an image classifier by attaching a head of dense layers to a pretrained base. The base we used was from a model called **VGG16**. We saw that the VGG16 architecture was prone to overfitting this dataset. Over this course, you'll learn a number of ways you can improve upon this initial attempt.\n\nThe first way you'll see is to use a base more appropriate to the dataset. The base this model comes from is called **InceptionV1** (also known as GoogLeNet). InceptionV1 was one of the early winners of the ImageNet competition. One of its successors, InceptionV4, is among the state of the art today.\n\nTo get started, run the code cell below to set everything up.","metadata":{}},{"cell_type":"code","source":"# Setup feedback system\nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.computer_vision.ex1 import *\n\n# Imports\nimport os, warnings\nimport matplotlib.pyplot as plt\nfrom matplotlib import gridspec\n\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing import image_dataset_from_directory\n\n# Reproducability\ndef set_seed(seed=31415):\n    np.random.seed(seed)\n    tf.random.set_seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    os.environ['TF_DETERMINISTIC_OPS'] = '1'\nset_seed()\n\n# Set Matplotlib defaults\nplt.rc('figure', autolayout=True)\nplt.rc('axes', labelweight='bold', labelsize='large',\n       titleweight='bold', titlesize=18, titlepad=10)\nplt.rc('image', cmap='magma')\nwarnings.filterwarnings(\"ignore\") # to clean up output cells\n\n\n# Load training and validation sets\nds_train_ = image_dataset_from_directory(\n    '../input/car-or-truck/train',\n    labels='inferred',\n    label_mode='binary',\n    image_size=[128, 128],\n    interpolation='nearest',\n    batch_size=64,\n    shuffle=True,\n)\nds_valid_ = image_dataset_from_directory(\n    '../input/car-or-truck/valid',\n    labels='inferred',\n    label_mode='binary',\n    image_size=[128, 128],\n    interpolation='nearest',\n    batch_size=64,\n    shuffle=False,\n)\n\n# Data Pipeline\ndef convert_to_float(image, label):\n    image = tf.image.convert_image_dtype(image, dtype=tf.float32)\n    return image, label\n\nAUTOTUNE = tf.data.experimental.AUTOTUNE\nds_train = (\n    ds_train_\n    .map(convert_to_float)\n    .cache()\n    .prefetch(buffer_size=AUTOTUNE)\n)\nds_valid = (\n    ds_valid_\n    .map(convert_to_float)\n    .cache()\n    .prefetch(buffer_size=AUTOTUNE)\n)\n","metadata":{"lines_to_next_cell":2,"execution":{"iopub.status.busy":"2024-05-21T13:40:44.406790Z","iopub.execute_input":"2024-05-21T13:40:44.407529Z","iopub.status.idle":"2024-05-21T13:41:09.050734Z","shell.execute_reply.started":"2024-05-21T13:40:44.407492Z","shell.execute_reply":"2024-05-21T13:41:09.049586Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stderr","text":"2024-05-21 13:40:48.253045: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-05-21 13:40:48.253154: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-05-21 13:40:48.421995: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"},{"name":"stdout","text":"Found 5117 files belonging to 2 classes.\nFound 5051 files belonging to 2 classes.\n","output_type":"stream"}]},{"cell_type":"markdown","source":"The **InceptionV1** model pretrained on ImageNet is available in the [TensorFlow Hub](https://www.tensorflow.org/hub/) repository, but we'll load it from a local copy. Run this cell to load InceptionV1 for your base.","metadata":{}},{"cell_type":"code","source":"import tensorflow_hub as hub\n\npretrained_base = tf.keras.models.load_model(\n    '../input/cv-course-models/cv-course-models/inceptionv1'\n)","metadata":{"lines_to_next_cell":0,"execution":{"iopub.status.busy":"2024-05-21T13:41:18.215304Z","iopub.execute_input":"2024-05-21T13:41:18.216301Z","iopub.status.idle":"2024-05-21T13:41:22.410990Z","shell.execute_reply.started":"2024-05-21T13:41:18.216238Z","shell.execute_reply":"2024-05-21T13:41:22.409742Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":"# 1) Define Pretrained Base #\n\nNow that you have a pretrained base to do our feature extraction, decide whether this base should be trainable or not.","metadata":{}},{"cell_type":"code","source":"# YOUR_CODE_HERE\npretrained_base.trainable = False\n\n# Check your answer\nq_1.check()","metadata":{"lines_to_next_cell":0,"execution":{"iopub.status.busy":"2024-05-21T13:42:21.546168Z","iopub.execute_input":"2024-05-21T13:42:21.546779Z","iopub.status.idle":"2024-05-21T13:42:21.555537Z","shell.execute_reply.started":"2024-05-21T13:42:21.546736Z","shell.execute_reply":"2024-05-21T13:42:21.554628Z"},"trusted":true},"execution_count":5,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"1_Q1\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct: When doing transfer learning, it's generally not a good idea to retrain the entire base -- at least not without some care. The reason is that the random weights in the head will initially create large gradient updates, which propogate back into the base layers and destroy much of the pretraining. Using techniques known as **fine tuning** it's possible to further train the base on new data, but this requires some care to do well.","text/markdown":"<span style=\"color:#33cc33\">Correct:</span> When doing transfer learning, it's generally not a good idea to retrain the entire base -- at least not without some care. The reason is that the random weights in the head will initially create large gradient updates, which propogate back into the base layers and destroy much of the pretraining. Using techniques known as **fine tuning** it's possible to further train the base on new data, but this requires some care to do well."},"metadata":{}}]},{"cell_type":"code","source":"# Lines below will give you a hint or solution code\nq_1.hint()\nq_1.solution()","metadata":{"execution":{"iopub.status.busy":"2024-05-21T13:42:04.285252Z","iopub.execute_input":"2024-05-21T13:42:04.285677Z","iopub.status.idle":"2024-05-21T13:42:04.301196Z","shell.execute_reply.started":"2024-05-21T13:42:04.285643Z","shell.execute_reply":"2024-05-21T13:42:04.299618Z"},"trusted":true},"execution_count":4,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"interactionType\": 2, \"questionType\": 2, \"questionId\": \"1_Q1\", \"learnToolsVersion\": \"0.3.4\", \"valueTowardsCompletion\": 0.0, \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\", \"outcomeType\": 4}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Hint: `True` or `False`?","text/markdown":"<span style=\"color:#3366cc\">Hint:</span> `True` or `False`?"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"interactionType\": 3, \"questionType\": 2, \"questionId\": \"1_Q1\", \"learnToolsVersion\": \"0.3.4\", \"valueTowardsCompletion\": 0.0, \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\", \"outcomeType\": 4}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Solution: \n```python\npretrained_base.trainable = False\n```","text/markdown":"<span style=\"color:#33cc99\">Solution:</span> \n```python\npretrained_base.trainable = False\n```"},"metadata":{}}]},{"cell_type":"markdown","source":"# 2) Attach Head #\n\nNow that the base is defined to do the feature extraction, create a head of `Dense` layers to perform the classification, following this diagram:\n\n<figure>\n<img src=\"https://storage.googleapis.com/kaggle-media/learn/images/i5VU7Ry.png\" alt=\"Diagram of the dense head.\">\n</figure>\n","metadata":{}},{"cell_type":"code","source":"from tensorflow import keras\nfrom tensorflow.keras import layers\n\nmodel = keras.Sequential([\n    pretrained_base,\n    layers.Flatten(),\n    # YOUR CODE HERE. Attach a head of dense layers.\n    layers.Dense(6, activation='relu'),\n    layers.Dense(1, activation='sigmoid')\n])\n\n# Check your answer\nq_2.check()","metadata":{"lines_to_next_cell":0,"execution":{"iopub.status.busy":"2024-05-21T13:43:49.196195Z","iopub.execute_input":"2024-05-21T13:43:49.196593Z","iopub.status.idle":"2024-05-21T13:43:49.233630Z","shell.execute_reply.started":"2024-05-21T13:43:49.196565Z","shell.execute_reply":"2024-05-21T13:43:49.232447Z"},"trusted":true},"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"2_Q2\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct","text/markdown":"<span style=\"color:#33cc33\">Correct</span>"},"metadata":{}}]},{"cell_type":"code","source":"# Lines below will give you a hint or solution code\n#q_2.hint()\n#q_2.solution()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 3) Train #\n\nBefore training a model in Keras, you need to specify an *optimizer* to perform the gradient descent, a *loss function* to be minimized, and (optionally) any *performance metrics*. The optimization algorithm we'll use for this course is called [\"Adam\"](https://keras.io/api/optimizers/adam/), which generally performs well regardless of what kind of problem you're trying to solve.\n\nThe loss and the metrics, however, need to match the kind of problem you're trying to solve. Our problem is a **binary classification** problem: `Car` coded as 0, and `Truck` coded as 1. Choose an appropriate loss and an appropriate accuracy metric for binary classification.","metadata":{}},{"cell_type":"code","source":"# YOUR CODE HERE: what loss function should you use for a binary\n# classification problem? (Your answer for each should be a string.)\noptimizer = tf.keras.optimizers.Adam(epsilon=0.01)\nmodel.compile(\n    optimizer=optimizer,\n    loss = 'binary_crossentropy',\n    metrics=['binary_accuracy'],\n)\n\n# Check your answer\nq_3.check()","metadata":{"lines_to_next_cell":0,"execution":{"iopub.status.busy":"2024-05-21T13:45:53.476160Z","iopub.execute_input":"2024-05-21T13:45:53.476642Z","iopub.status.idle":"2024-05-21T13:45:53.509475Z","shell.execute_reply.started":"2024-05-21T13:45:53.476598Z","shell.execute_reply":"2024-05-21T13:45:53.508360Z"},"trusted":true},"execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"3_Q3\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct","text/markdown":"<span style=\"color:#33cc33\">Correct</span>"},"metadata":{}}]},{"cell_type":"code","source":"# Lines below will give you a hint or solution code\nq_3.hint()\nq_3.solution()","metadata":{"lines_to_next_cell":0,"execution":{"iopub.status.busy":"2024-05-21T13:45:27.655444Z","iopub.execute_input":"2024-05-21T13:45:27.655792Z","iopub.status.idle":"2024-05-21T13:45:27.669459Z","shell.execute_reply.started":"2024-05-21T13:45:27.655767Z","shell.execute_reply":"2024-05-21T13:45:27.668049Z"},"trusted":true},"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"interactionType\": 2, \"questionType\": 2, \"questionId\": \"3_Q3\", \"learnToolsVersion\": \"0.3.4\", \"valueTowardsCompletion\": 0.0, \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\", \"outcomeType\": 4}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Hint: This is a *binary* classification problem.","text/markdown":"<span style=\"color:#3366cc\">Hint:</span> This is a *binary* classification problem."},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"interactionType\": 3, \"questionType\": 2, \"questionId\": \"3_Q3\", \"learnToolsVersion\": \"0.3.4\", \"valueTowardsCompletion\": 0.0, \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\", \"outcomeType\": 4}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Solution: \n```python\n\nmodel.compile(\n    optimizer='adam',\n    loss='binary_crossentropy',\n    metrics=['binary_accuracy'],\n)\n\n```","text/markdown":"<span style=\"color:#33cc99\">Solution:</span> \n```python\n\nmodel.compile(\n    optimizer='adam',\n    loss='binary_crossentropy',\n    metrics=['binary_accuracy'],\n)\n\n```"},"metadata":{}}]},{"cell_type":"code","source":"history = model.fit(\n    ds_train,\n    validation_data=ds_valid,\n    epochs=30,\n)","metadata":{"execution":{"iopub.status.busy":"2024-05-21T13:46:05.396947Z","iopub.execute_input":"2024-05-21T13:46:05.397376Z","iopub.status.idle":"2024-05-21T14:51:06.107344Z","shell.execute_reply.started":"2024-05-21T13:46:05.397344Z","shell.execute_reply":"2024-05-21T14:51:06.106213Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"Epoch 1/30\n80/80 [==============================] - 103s 1s/step - loss: 0.5190 - binary_accuracy: 0.7416 - val_loss: 0.4367 - val_binary_accuracy: 0.8044\nEpoch 2/30\n80/80 [==============================] - 90s 1s/step - loss: 0.4061 - binary_accuracy: 0.8257 - val_loss: 0.4042 - val_binary_accuracy: 0.8220\nEpoch 3/30\n80/80 [==============================] - 90s 1s/step - loss: 0.3783 - binary_accuracy: 0.8362 - val_loss: 0.3889 - val_binary_accuracy: 0.8309\nEpoch 4/30\n80/80 [==============================] - 90s 1s/step - loss: 0.3592 - binary_accuracy: 0.8442 - val_loss: 0.3785 - val_binary_accuracy: 0.8359\nEpoch 5/30\n80/80 [==============================] - 90s 1s/step - loss: 0.3429 - binary_accuracy: 0.8513 - val_loss: 0.3657 - val_binary_accuracy: 0.8428\nEpoch 6/30\n80/80 [==============================] - 90s 1s/step - loss: 0.3312 - binary_accuracy: 0.8571 - val_loss: 0.3621 - val_binary_accuracy: 0.8440\nEpoch 7/30\n80/80 [==============================] - 91s 1s/step - loss: 0.3210 - binary_accuracy: 0.8654 - val_loss: 0.3559 - val_binary_accuracy: 0.8472\nEpoch 8/30\n80/80 [==============================] - 90s 1s/step - loss: 0.3118 - binary_accuracy: 0.8708 - val_loss: 0.3502 - val_binary_accuracy: 0.8487\nEpoch 9/30\n80/80 [==============================] - 90s 1s/step - loss: 0.3027 - binary_accuracy: 0.8751 - val_loss: 0.3454 - val_binary_accuracy: 0.8497\nEpoch 10/30\n80/80 [==============================] - 90s 1s/step - loss: 0.2956 - binary_accuracy: 0.8777 - val_loss: 0.3426 - val_binary_accuracy: 0.8519\nEpoch 11/30\n80/80 [==============================] - 90s 1s/step - loss: 0.2890 - binary_accuracy: 0.8808 - val_loss: 0.3403 - val_binary_accuracy: 0.8517\nEpoch 12/30\n80/80 [==============================] - 90s 1s/step - loss: 0.2828 - binary_accuracy: 0.8829 - val_loss: 0.3379 - val_binary_accuracy: 0.8537\nEpoch 13/30\n80/80 [==============================] - 90s 1s/step - loss: 0.2771 - binary_accuracy: 0.8851 - val_loss: 0.3354 - val_binary_accuracy: 0.8547\nEpoch 14/30\n80/80 [==============================] - 90s 1s/step - loss: 0.2716 - binary_accuracy: 0.8867 - val_loss: 0.3351 - val_binary_accuracy: 0.8563\nEpoch 15/30\n80/80 [==============================] - 90s 1s/step - loss: 0.2660 - binary_accuracy: 0.8908 - val_loss: 0.3323 - val_binary_accuracy: 0.8580\nEpoch 16/30\n80/80 [==============================] - 91s 1s/step - loss: 0.2609 - binary_accuracy: 0.8927 - val_loss: 0.3318 - val_binary_accuracy: 0.8590\nEpoch 17/30\n80/80 [==============================] - 90s 1s/step - loss: 0.2563 - binary_accuracy: 0.8954 - val_loss: 0.3302 - val_binary_accuracy: 0.8600\nEpoch 18/30\n80/80 [==============================] - 90s 1s/step - loss: 0.2525 - binary_accuracy: 0.8974 - val_loss: 0.3295 - val_binary_accuracy: 0.8616\nEpoch 19/30\n80/80 [==============================] - 91s 1s/step - loss: 0.2484 - binary_accuracy: 0.8990 - val_loss: 0.3284 - val_binary_accuracy: 0.8620\nEpoch 20/30\n80/80 [==============================] - 90s 1s/step - loss: 0.2453 - binary_accuracy: 0.9003 - val_loss: 0.3296 - val_binary_accuracy: 0.8620\nEpoch 21/30\n80/80 [==============================] - 91s 1s/step - loss: 0.2415 - binary_accuracy: 0.9031 - val_loss: 0.3289 - val_binary_accuracy: 0.8624\nEpoch 22/30\n80/80 [==============================] - 90s 1s/step - loss: 0.2375 - binary_accuracy: 0.9040 - val_loss: 0.3294 - val_binary_accuracy: 0.8636\nEpoch 23/30\n80/80 [==============================] - 91s 1s/step - loss: 0.2340 - binary_accuracy: 0.9060 - val_loss: 0.3299 - val_binary_accuracy: 0.8640\nEpoch 24/30\n80/80 [==============================] - 90s 1s/step - loss: 0.2307 - binary_accuracy: 0.9078 - val_loss: 0.3300 - val_binary_accuracy: 0.8644\nEpoch 25/30\n80/80 [==============================] - 90s 1s/step - loss: 0.2267 - binary_accuracy: 0.9095 - val_loss: 0.3313 - val_binary_accuracy: 0.8638\nEpoch 26/30\n80/80 [==============================] - 89s 1s/step - loss: 0.2239 - binary_accuracy: 0.9111 - val_loss: 0.3315 - val_binary_accuracy: 0.8640\nEpoch 27/30\n80/80 [==============================] - 90s 1s/step - loss: 0.2205 - binary_accuracy: 0.9113 - val_loss: 0.3324 - val_binary_accuracy: 0.8654\nEpoch 28/30\n80/80 [==============================] - 91s 1s/step - loss: 0.2173 - binary_accuracy: 0.9130 - val_loss: 0.3339 - val_binary_accuracy: 0.8642\nEpoch 29/30\n80/80 [==============================] - 90s 1s/step - loss: 0.2145 - binary_accuracy: 0.9148 - val_loss: 0.3353 - val_binary_accuracy: 0.8640\nEpoch 30/30\n80/80 [==============================] - 90s 1s/step - loss: 0.2119 - binary_accuracy: 0.9166 - val_loss: 0.3360 - val_binary_accuracy: 0.8638\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Run the cell below to plot the loss and metric curves for this training run.","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nhistory_frame = pd.DataFrame(history.history)\nhistory_frame.loc[:, ['loss', 'val_loss']].plot()\nhistory_frame.loc[:, ['binary_accuracy', 'val_binary_accuracy']].plot();","metadata":{"execution":{"iopub.status.busy":"2024-05-21T15:08:49.275730Z","iopub.execute_input":"2024-05-21T15:08:49.276136Z","iopub.status.idle":"2024-05-21T15:08:50.115924Z","shell.execute_reply.started":"2024-05-21T15:08:49.276107Z","shell.execute_reply":"2024-05-21T15:08:50.114735Z"},"trusted":true},"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# 4) Examine Loss and Accuracy #\n\nDo you notice a difference between these learning curves and the curves for VGG16 from the tutorial? What does this difference tell you about what this model (InceptionV2) learned compared to VGG16? Are there ways in which one is better than the other? Worse?\n\nAfter you've thought about it, run the cell below to see the answer.","metadata":{}},{"cell_type":"code","source":"# View the solution (Run this code cell to receive credit!)\nq_4.check()","metadata":{"execution":{"iopub.status.busy":"2024-05-21T15:09:22.965103Z","iopub.execute_input":"2024-05-21T15:09:22.965501Z","iopub.status.idle":"2024-05-21T15:09:22.974973Z","shell.execute_reply.started":"2024-05-21T15:09:22.965472Z","shell.execute_reply":"2024-05-21T15:09:22.973734Z"},"trusted":true},"execution_count":14,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 4, \"questionId\": \"4_Q4\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct: \n\nThat the training loss and validation loss stay fairly close is evidence that the model isn't just memorizing the training data, but rather learning general properties of the two classes. But, because this model converges at a loss greater than the VGG16 model, it's likely that it is underfitting some, and could benefit from some extra capacity.","text/markdown":"<span style=\"color:#33cc33\">Correct:</span> \n\nThat the training loss and validation loss stay fairly close is evidence that the model isn't just memorizing the training data, but rather learning general properties of the two classes. But, because this model converges at a loss greater than the VGG16 model, it's likely that it is underfitting some, and could benefit from some extra capacity.\n"},"metadata":{}}]},{"cell_type":"markdown","source":"# Conclusion #\n\nIn this first lesson, you learned the basics of **convolutional image classifiers**, that they consist of a **base** for extracting features from images, and a **head** which uses the features to decide the image's class. You also saw how to build a classifier with **transfer learning** on pretrained base. ","metadata":{}},{"cell_type":"markdown","source":"# Keep Going #\n\nMove on to [**Lesson 2**](https://www.kaggle.com/ryanholbrook/convolution-and-relu) for a detailed look at how the base does this feature extraction. (It's really cool!)","metadata":{}},{"cell_type":"markdown","source":"---\n\n\n\n\n*Have questions or comments? Visit the [course discussion forum](https://www.kaggle.com/learn/computer-vision/discussion) to chat with other learners.*","metadata":{}}]}